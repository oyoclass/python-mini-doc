{
    "docs": [
        {
            "location": "/", 
            "text": "Python Mini Documentation\n\n\nPython Mini implements a subset of Python 2, plus the addition of two graphical libraries, Turtle, Processing.\n\n\nGet started", 
            "title": "Home"
        }, 
        {
            "location": "/#python-mini-documentation", 
            "text": "Python Mini implements a subset of Python 2, plus the addition of two graphical libraries, Turtle, Processing.", 
            "title": "Python Mini Documentation"
        }, 
        {
            "location": "/#get-started", 
            "text": "", 
            "title": "Get started"
        }, 
        {
            "location": "/core/types/", 
            "text": "", 
            "title": "Types"
        }, 
        {
            "location": "/stdmod/math/", 
            "text": "math \u2014 Mathematical functions\n\n\n\n\n\nThis module contains some mathematical operations (subset of Python's standard \nmath\n module), to use it, make sure use \nimport math\n first to import it.\n\n\nConstants\n\n\n\n\nmath.e\n : The mathematical constant e = 2.718281..., to available precision\n\n\nmath.pi\n : The mathematical constant \u03c0 = 3.141592..., to available precision.\n\n\n\n\nFunctions\n\n\n\n\nmath.acos(x)\n : Return the arc cosine of x, in radians.\n\n\nmath.acosh(x)\n : Return the inverse hyperbolic cosine of x.\n\n\nmath.asin(x)\n : Return the arc sine of x, in radians.\n\n\nmath.asinh(x)\n : Return the inverse hyperbolic sine of x.\n\n\nmath.atan(x)\n : Return the arc tangent of x, in radians.\n\n\nmath.atan2(y, x)\n : Return atan(y / x), in radians. The result is between -pi and pi.\n\n\nmath.atanh(x)\n : Return the inverse hyperbolic tangent of x.\n\n\nmath.ceil(x)\n : Return the ceiling of x as a float, the smallest integer value greater than or equal to x.\n\n\nmath.cos(x)\n : Return the cosine of x radians.\n\n\nmath.cosh(x)\n : Return the hyperbolic cosine of x.\n\n\nmath.degrees(x)\n : Convert angle x from radians to degrees.\n\n\nmath.exp(x)\n : Return e**x.\n\n\nmath.fabs(x)\n : Return the absolute value of x.\n\n\nmath.factorial(x)\n : Return x factorial.\n\n\nmath.floor(x)\n : Return the floor of x as a float, the largest integer value less than or equal to x.\n\n\nmath.hypot(x, y)\n : Return the Euclidean norm, sqrt(x\nx + y\ny). This is the length of the vector from the origin to point (x, y).\n\n\nmath.log(x[,base])\n : With one argument, return the natural logarithm of x (to base e). With two arguments, return the logarithm of x to the given base, calculated as log(x)/log(base).\n\n\nmath.log10(x)\n : Return the base-10 logarithm of x. This is usually more accurate than log(x, 10).\n\n\nmath.pow(x, y)\n : Return x raised to the power y.\n\n\nmath.radians\n : Convert angle x from degrees to radians.\n\n\nmath.sin(x)\n : Return the sine of x radians.\n\n\nmath.sinh(x)\n : Return the hyperbolic sine of x.\n\n\nmath.sqrt(x)\n : Return the square root of x.\n\n\nmath.tan(x)\n : Return the tangent of x radians.\n\n\nmath.tanh(x)\n : Return the hyperbolic tangent of x.\n\n\nmath.trunc(x)\n : Return the Real value x truncated to an Integral (usually a long integer).\n\n\n\n\nExample\n\n\nimport math\n\nprint math.pi\n# 3.14159265359\n\nprint math.sqrt(4)\n# 2.0\n\nprint math.sin(math.pi/6)\n# 0.5\n\nprint math.degrees(math.pi/6)\n# 30.0\n\n\n\n\nReference\n\n\n\n\nPython Math Module, python.org", 
            "title": "math"
        }, 
        {
            "location": "/stdmod/math/#math-mathematical-functions", 
            "text": "This module contains some mathematical operations (subset of Python's standard  math  module), to use it, make sure use  import math  first to import it.", 
            "title": "math \u2014 Mathematical functions"
        }, 
        {
            "location": "/stdmod/math/#constants", 
            "text": "math.e  : The mathematical constant e = 2.718281..., to available precision  math.pi  : The mathematical constant \u03c0 = 3.141592..., to available precision.", 
            "title": "Constants"
        }, 
        {
            "location": "/stdmod/math/#functions", 
            "text": "math.acos(x)  : Return the arc cosine of x, in radians.  math.acosh(x)  : Return the inverse hyperbolic cosine of x.  math.asin(x)  : Return the arc sine of x, in radians.  math.asinh(x)  : Return the inverse hyperbolic sine of x.  math.atan(x)  : Return the arc tangent of x, in radians.  math.atan2(y, x)  : Return atan(y / x), in radians. The result is between -pi and pi.  math.atanh(x)  : Return the inverse hyperbolic tangent of x.  math.ceil(x)  : Return the ceiling of x as a float, the smallest integer value greater than or equal to x.  math.cos(x)  : Return the cosine of x radians.  math.cosh(x)  : Return the hyperbolic cosine of x.  math.degrees(x)  : Convert angle x from radians to degrees.  math.exp(x)  : Return e**x.  math.fabs(x)  : Return the absolute value of x.  math.factorial(x)  : Return x factorial.  math.floor(x)  : Return the floor of x as a float, the largest integer value less than or equal to x.  math.hypot(x, y)  : Return the Euclidean norm, sqrt(x x + y y). This is the length of the vector from the origin to point (x, y).  math.log(x[,base])  : With one argument, return the natural logarithm of x (to base e). With two arguments, return the logarithm of x to the given base, calculated as log(x)/log(base).  math.log10(x)  : Return the base-10 logarithm of x. This is usually more accurate than log(x, 10).  math.pow(x, y)  : Return x raised to the power y.  math.radians  : Convert angle x from degrees to radians.  math.sin(x)  : Return the sine of x radians.  math.sinh(x)  : Return the hyperbolic sine of x.  math.sqrt(x)  : Return the square root of x.  math.tan(x)  : Return the tangent of x radians.  math.tanh(x)  : Return the hyperbolic tangent of x.  math.trunc(x)  : Return the Real value x truncated to an Integral (usually a long integer).", 
            "title": "Functions"
        }, 
        {
            "location": "/stdmod/math/#example", 
            "text": "import math\n\nprint math.pi\n# 3.14159265359\n\nprint math.sqrt(4)\n# 2.0\n\nprint math.sin(math.pi/6)\n# 0.5\n\nprint math.degrees(math.pi/6)\n# 30.0", 
            "title": "Example"
        }, 
        {
            "location": "/stdmod/math/#reference", 
            "text": "Python Math Module, python.org", 
            "title": "Reference"
        }, 
        {
            "location": "/stdmod/random/", 
            "text": "random \u2014 Generate pseudo-random numbers\n\n\n\n\n\nThis module implements a subset of Python standard \nrandom\n module, it contains pseudo-random number generators for various distributions. To use it, make sure use \nimport random\n first.\n\n\nFunctions\n\n\n\n\nrandom.choice(seq)\n : Return a random element from the non-empty sequence seq.\n\n\nrandom.randint(a, b)\n : Return a random integer N such that a \n= N \n= b\n\n\nrandom.random\n : Return the next random floating point number in the range [0.0, 1.0).\n\n\nrandom.randrange(stop)\n : See below.\n\n\nrandom.randrange(start, stop[, step])\n : Return a randomly selected element from \nrange(start, stop, step)\n. This is equivalent to \nchoice(range(start, stop, step))\n.\n\n\nrandom.seed(x)\n : Initialize the basic random number generator.\n\n\nrandom.shuffle(x)\n : Shuffle the sequence x in place.\n\n\n\n\nExample\n\n\nimport random\n\nlst = [1, 2, 3, 4, 5]\n\nprint random.choice(lst)\n\nprint random.randint(1, 10)\n\nprint random.random()\n\nrandom.shuffle(lst)\nprint lst\n\n\n\n\nReference\n\n\n\n\nrandom module, python.org", 
            "title": "random"
        }, 
        {
            "location": "/stdmod/random/#random-generate-pseudo-random-numbers", 
            "text": "This module implements a subset of Python standard  random  module, it contains pseudo-random number generators for various distributions. To use it, make sure use  import random  first.", 
            "title": "random \u2014 Generate pseudo-random numbers"
        }, 
        {
            "location": "/stdmod/random/#functions", 
            "text": "random.choice(seq)  : Return a random element from the non-empty sequence seq.  random.randint(a, b)  : Return a random integer N such that a  = N  = b  random.random  : Return the next random floating point number in the range [0.0, 1.0).  random.randrange(stop)  : See below.  random.randrange(start, stop[, step])  : Return a randomly selected element from  range(start, stop, step) . This is equivalent to  choice(range(start, stop, step)) .  random.seed(x)  : Initialize the basic random number generator.  random.shuffle(x)  : Shuffle the sequence x in place.", 
            "title": "Functions"
        }, 
        {
            "location": "/stdmod/random/#example", 
            "text": "import random\n\nlst = [1, 2, 3, 4, 5]\n\nprint random.choice(lst)\n\nprint random.randint(1, 10)\n\nprint random.random()\n\nrandom.shuffle(lst)\nprint lst", 
            "title": "Example"
        }, 
        {
            "location": "/stdmod/random/#reference", 
            "text": "random module, python.org", 
            "title": "Reference"
        }, 
        {
            "location": "/stdmod/time/", 
            "text": "time \u2014 Time access\n\n\n\n\n\nThis module provides time-related functions.\n\n\nFunctions\n\n\n\n\ntime.time()\n : Return the time in seconds since the epoch as a floating point number.\n\n\n\n\nReference\n\n\n\n\ntime module, python.org", 
            "title": "time"
        }, 
        {
            "location": "/stdmod/time/#time-time-access", 
            "text": "This module provides time-related functions.", 
            "title": "time \u2014 Time access"
        }, 
        {
            "location": "/stdmod/time/#functions", 
            "text": "time.time()  : Return the time in seconds since the epoch as a floating point number.", 
            "title": "Functions"
        }, 
        {
            "location": "/stdmod/time/#reference", 
            "text": "time module, python.org", 
            "title": "Reference"
        }, 
        {
            "location": "/stdmod/regexp/", 
            "text": "Regular Expression", 
            "title": "re"
        }, 
        {
            "location": "/stdmod/regexp/#regular-expression", 
            "text": "", 
            "title": "Regular Expression"
        }, 
        {
            "location": "/turtle/turtle/", 
            "text": "turtle \u2014 Turtle graphics\n\n\nTurtle graphic implements a subset functions of the \nPython Turtle Library\n.\n\n\nSetup\n\n\nfrom turtle import Turtle\n\n# Generate Turtle object, name it like your pet\nnick = Turtle()\n\n\n\n\nNow you have your own turtle (in this example I called it \nnick\n, but you can change it), there are several functions you can use to control your turtle.\n\n\nMove and draw\n\n\n\n\nturtle.forward(distance)\n or \nturtle.fd(distance)\n : Move the turtle forward by \ndistance\n, in the direction the turtle is headed.\n\n\nturtle.backward(distance)\n or \nturtle.back(distance)\n or \nturtle.bk(distance)\n : Move the turtle backward by \ndistance\n, opposite to the direction the turtle is headed. This function doesn't change turtle's heading.\n\n\nturtle.right(angle)\n or \nturtle.rt(angle)\n :\n\n\nturtle.left(angle)\n or \nturtle.lt(angle)\n :\n\n\nturtle.goto(x, y)\n :\n\n\nturtle.setposition(x, y)\n or \nturtle.setpos(x, y)\n :\n\n\nturtle.setworldcoordinates()\n : ?\n\n\nturtle.setx(x)\n :\n\n\nturtle.sety(y)\n :\n\n\nturtle.setheading(dir)\n or \nturtle.seth(dir)\n :\n\n\nturtle.home()\n :\n\n\nturtle.circle()\n :\n\n\nturtle.dot()\n :\n\n\nturtle.stamp()\n :\n\n\nturtle.speed()\n :\n\n\n\n\nAppearance\n\n\n\n\nturtle.shape()\n :\n\n\n\n\nTell Turtle's State\n\n\n\n\nturtle.position()\n or \nturtle.pos()\n : Return the turtle\u2019s current location (x, y)\n\n\nturtle.towards(x, y)\n : Return the angle between the line from turtle position to position specified by (x, y), the vector or the other turtle.\n\n\nturtle.xcor()\n :\n\n\nturtle.ycor()\n :\n\n\nturtle.heading()\n :\n\n\nturtle.distance()\n :\n\n\n\n\nPen control\n\n\n\n\nturtle.pendown()\n or \nturtle.pd()\n or \nturtle.down()\n :\n\n\nturtle.penup()\n or \nturtle.pu()\n or \nturtle.up()\n :\n\n\nturtle.pensize(number)\n or \nturtle.width(number)\n :\n\n\nturtle.isdown()\n :\n\n\n\n\nColor control\n\n\n\n\nturtle.color()\n :\n\n\nturtle.pencolor()\n :\n\n\nturtle.fillcolor()\n :\n\n\n\n\nFilling\n\n\n\n\nturtle.fill()\n :\n\n\nturtle.begin_fill()\n :\n\n\nturtle.end_fill()\n :\n\n\n\n\nVisibility\n\n\n\n\nturtle.showturtle()\n or \nturtle.st()\n :\n\n\nturtle.hideturtle()\n or \nturtle.ht()\n :\n\n\nturtle.isvisible()\n :\n\n\n\n\nAnimation control\n\n\n\n\nturtle.delay()\n :\n\n\nturtle.tracer()\n :\n\n\nturtle.update()\n :\n\n\n\n\nReset\n\n\n\n\nturtle.reset()\n :\n\n\nturtle.clear()\n :\n\n\n\n\nExamples\n\n\n\n\nDraw line and circle\n\n\n\n\nfrom turtle import Turtle\nnick = Turtle()\n\n# move forward 100 steps\nnick.forward(100)\n\n\n\n\n\n\n\n\nDraw square\n\n\n\n\n\n\nPixel Art\n\n\n\n\n\n\nReference\n\n\n\n\nturtle library", 
            "title": "turtle"
        }, 
        {
            "location": "/turtle/turtle/#turtle-turtle-graphics", 
            "text": "Turtle graphic implements a subset functions of the  Python Turtle Library .", 
            "title": "turtle \u2014 Turtle graphics"
        }, 
        {
            "location": "/turtle/turtle/#setup", 
            "text": "from turtle import Turtle\n\n# Generate Turtle object, name it like your pet\nnick = Turtle()  Now you have your own turtle (in this example I called it  nick , but you can change it), there are several functions you can use to control your turtle.", 
            "title": "Setup"
        }, 
        {
            "location": "/turtle/turtle/#move-and-draw", 
            "text": "turtle.forward(distance)  or  turtle.fd(distance)  : Move the turtle forward by  distance , in the direction the turtle is headed.  turtle.backward(distance)  or  turtle.back(distance)  or  turtle.bk(distance)  : Move the turtle backward by  distance , opposite to the direction the turtle is headed. This function doesn't change turtle's heading.  turtle.right(angle)  or  turtle.rt(angle)  :  turtle.left(angle)  or  turtle.lt(angle)  :  turtle.goto(x, y)  :  turtle.setposition(x, y)  or  turtle.setpos(x, y)  :  turtle.setworldcoordinates()  : ?  turtle.setx(x)  :  turtle.sety(y)  :  turtle.setheading(dir)  or  turtle.seth(dir)  :  turtle.home()  :  turtle.circle()  :  turtle.dot()  :  turtle.stamp()  :  turtle.speed()  :", 
            "title": "Move and draw"
        }, 
        {
            "location": "/turtle/turtle/#appearance", 
            "text": "turtle.shape()  :", 
            "title": "Appearance"
        }, 
        {
            "location": "/turtle/turtle/#tell-turtles-state", 
            "text": "turtle.position()  or  turtle.pos()  : Return the turtle\u2019s current location (x, y)  turtle.towards(x, y)  : Return the angle between the line from turtle position to position specified by (x, y), the vector or the other turtle.  turtle.xcor()  :  turtle.ycor()  :  turtle.heading()  :  turtle.distance()  :", 
            "title": "Tell Turtle's State"
        }, 
        {
            "location": "/turtle/turtle/#pen-control", 
            "text": "turtle.pendown()  or  turtle.pd()  or  turtle.down()  :  turtle.penup()  or  turtle.pu()  or  turtle.up()  :  turtle.pensize(number)  or  turtle.width(number)  :  turtle.isdown()  :", 
            "title": "Pen control"
        }, 
        {
            "location": "/turtle/turtle/#color-control", 
            "text": "turtle.color()  :  turtle.pencolor()  :  turtle.fillcolor()  :", 
            "title": "Color control"
        }, 
        {
            "location": "/turtle/turtle/#filling", 
            "text": "turtle.fill()  :  turtle.begin_fill()  :  turtle.end_fill()  :", 
            "title": "Filling"
        }, 
        {
            "location": "/turtle/turtle/#visibility", 
            "text": "turtle.showturtle()  or  turtle.st()  :  turtle.hideturtle()  or  turtle.ht()  :  turtle.isvisible()  :", 
            "title": "Visibility"
        }, 
        {
            "location": "/turtle/turtle/#animation-control", 
            "text": "turtle.delay()  :  turtle.tracer()  :  turtle.update()  :", 
            "title": "Animation control"
        }, 
        {
            "location": "/turtle/turtle/#reset", 
            "text": "turtle.reset()  :  turtle.clear()  :", 
            "title": "Reset"
        }, 
        {
            "location": "/turtle/turtle/#examples", 
            "text": "Draw line and circle   from turtle import Turtle\nnick = Turtle()\n\n# move forward 100 steps\nnick.forward(100)    Draw square    Pixel Art", 
            "title": "Examples"
        }, 
        {
            "location": "/turtle/turtle/#reference", 
            "text": "turtle library", 
            "title": "Reference"
        }, 
        {
            "location": "/processing/setup/", 
            "text": "setup processing", 
            "title": "setup"
        }, 
        {
            "location": "/processing/setup/#setup-processing", 
            "text": "", 
            "title": "setup processing"
        }, 
        {
            "location": "/processing/keyboard/", 
            "text": "keyboard\n\n\nProperty\n\n\n\n\nkeyboard.keyCode", 
            "title": "keyboard"
        }, 
        {
            "location": "/processing/keyboard/#keyboard", 
            "text": "", 
            "title": "keyboard"
        }, 
        {
            "location": "/processing/keyboard/#property", 
            "text": "keyboard.keyCode", 
            "title": "Property"
        }, 
        {
            "location": "/processing/mouse/", 
            "text": "mouse\n\n\nProperty\n\n\n\n\nmouse.x\n\n\nmouse.y\n\n\nmouse.px (?)\n\n\nmouse.py (?)\n\n\nmouse.button\n\n\n\n\nFunctions\n\n\n\n\nmousePressed\n\n\nmouseMoved\n\n\nmouseReleased\n\n\n\n\nExample\n\n\nfrom processing import *\n\ndef mousePressed():\n    print \npressed at:\n, mouse.x, mouse.y\n    # left button is 37, right button is 39\n    print \nmouse button:\n, mouse.button\n\ndef mouseMoved():\n    print \nmouse moved\n\n\ndef mouseReleased():\n    print \nreleased ...\n\n\nrun()", 
            "title": "mouse"
        }, 
        {
            "location": "/processing/mouse/#mouse", 
            "text": "", 
            "title": "mouse"
        }, 
        {
            "location": "/processing/mouse/#property", 
            "text": "mouse.x  mouse.y  mouse.px (?)  mouse.py (?)  mouse.button", 
            "title": "Property"
        }, 
        {
            "location": "/processing/mouse/#functions", 
            "text": "mousePressed  mouseMoved  mouseReleased", 
            "title": "Functions"
        }, 
        {
            "location": "/processing/mouse/#example", 
            "text": "from processing import *\n\ndef mousePressed():\n    print  pressed at: , mouse.x, mouse.y\n    # left button is 37, right button is 39\n    print  mouse button: , mouse.button\n\ndef mouseMoved():\n    print  mouse moved \n\ndef mouseReleased():\n    print  released ... \n\nrun()", 
            "title": "Example"
        }
    ]
}