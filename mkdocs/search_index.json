{
    "docs": [
        {
            "location": "/", 
            "text": "What's Python?\n\n\nQuote from \nPython official website\n:\n\n\n\n\nPython is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python\u2019s elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms.\n\n\n\n\nWhy Python?\n\n\n\n\nEasy to learn, a lot of top universities use Python to teach \"Programming 101\".\n\n\nNot a toy, quite powerful and versatile, from basic tools to web development, to data analytics, etc, Python can handle all of them.\n\n\nWrite once, run everywhere. Once you finished the code, it can be run in Windows, Mac OS, Linux/Unix.\n\n\n\n\nAbout PythonMini\n\n\nPythonMini is an online python interpreter to help you write python in browser, without installing it to your computer. It implements a subset of Python 2, plus one additional graphical libraries - \nProcessing\n.\n\n\nQuick Start\n\n\nCopy following example code to PythonMini editor then click \"Run\":\n\n\n\n\nSay hello\n\n\n\n\nprint \nhello\n\n\n\n\n\n\n\nDoing math\n\n\n\n\nprint 123 * 456     # calculate 123 times 456\nprint 180 / 12      # calculate 180 divided by 12\n\n\n\n\n\n\nAsk a question\n\n\n\n\nanswer = raw_input(\nWhat's your name?\n)\nprint \nhello\n, answer\n\n\n\n\n\n\nDraw a circle\n\n\n\n\nfrom turtle import Turtle\nt = Turtle()\nt.circle(40)    # a circle with radius 40\n\n\n\n\n\n\nDraw a 3D rotating box\n\n\n\n\nfrom processing import *\n\nrotating = 0.01\n\ndef setup():\n    size(400, 400, P3D)\n\ndef draw():\n    global rotating\n    background(0, 0, 0)\n    translate(200, 100, 0)\n    rotateY(rotating)\n    rotating += 0.01\n    if rotating \n= PI:\n        rotating = 0.01\n    fill(255, 0, 0)\n    box(40)\n\nrun()\n\n\n\n\nThere are a lot more you can do with PythonMini, for more information and examples, check the documentation on the left.\n\n\nFeedback\n\n\nIf you find any error about this documentation, please help us improve it, mail us at \nfeedback@oyoclass.com\n\n\nCredits\n\n\n\n\nSkulpt\n\n\nPython Official Documentation\n\n\nProcessingjs\n \n \nProcessing.py", 
            "title": "Home"
        }, 
        {
            "location": "/#whats-python", 
            "text": "Quote from  Python official website :   Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python\u2019s elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms.", 
            "title": "What's Python?"
        }, 
        {
            "location": "/#why-python", 
            "text": "Easy to learn, a lot of top universities use Python to teach \"Programming 101\".  Not a toy, quite powerful and versatile, from basic tools to web development, to data analytics, etc, Python can handle all of them.  Write once, run everywhere. Once you finished the code, it can be run in Windows, Mac OS, Linux/Unix.", 
            "title": "Why Python?"
        }, 
        {
            "location": "/#about-pythonmini", 
            "text": "PythonMini is an online python interpreter to help you write python in browser, without installing it to your computer. It implements a subset of Python 2, plus one additional graphical libraries -  Processing .", 
            "title": "About PythonMini"
        }, 
        {
            "location": "/#quick-start", 
            "text": "Copy following example code to PythonMini editor then click \"Run\":   Say hello   print  hello    Doing math   print 123 * 456     # calculate 123 times 456\nprint 180 / 12      # calculate 180 divided by 12   Ask a question   answer = raw_input( What's your name? )\nprint  hello , answer   Draw a circle   from turtle import Turtle\nt = Turtle()\nt.circle(40)    # a circle with radius 40   Draw a 3D rotating box   from processing import *\n\nrotating = 0.01\n\ndef setup():\n    size(400, 400, P3D)\n\ndef draw():\n    global rotating\n    background(0, 0, 0)\n    translate(200, 100, 0)\n    rotateY(rotating)\n    rotating += 0.01\n    if rotating  = PI:\n        rotating = 0.01\n    fill(255, 0, 0)\n    box(40)\n\nrun()  There are a lot more you can do with PythonMini, for more information and examples, check the documentation on the left.", 
            "title": "Quick Start"
        }, 
        {
            "location": "/#feedback", 
            "text": "If you find any error about this documentation, please help us improve it, mail us at  feedback@oyoclass.com", 
            "title": "Feedback"
        }, 
        {
            "location": "/#credits", 
            "text": "Skulpt  Python Official Documentation  Processingjs     Processing.py", 
            "title": "Credits"
        }, 
        {
            "location": "/core/number/", 
            "text": "Number\n\n\nYou can use integer and floating-point numbers, example:\n\n\na = 1\nb = 2\nprint a + b     # 3\nprint b * 3     # 6\nprint 1 + 2 * 3 # 7\nprint (1 + 2) * 3   # 9\n\nc = 1.5\nprint c * 2     # 3.0\n\nprint 1 / 3     # 0\nprint 1.0 / 3   # 0.333333333333\n\n\n\n\nConversion between integer and floating-point number:\n\n\n\n\nint(x)\n : convert x to integer\n\n\nlong(x)\n : convert x to long integer\n\n\nfloat(x)\n : convert x to floating-point number\n\n\n\n\nExample:\n\n\nprint int(12.3)     # 12\nprint int(\n234\n)    # 234\nprint long(5.6)     # 5\nprint float(12)     # 12.0", 
            "title": "Number"
        }, 
        {
            "location": "/core/number/#number", 
            "text": "You can use integer and floating-point numbers, example:  a = 1\nb = 2\nprint a + b     # 3\nprint b * 3     # 6\nprint 1 + 2 * 3 # 7\nprint (1 + 2) * 3   # 9\n\nc = 1.5\nprint c * 2     # 3.0\n\nprint 1 / 3     # 0\nprint 1.0 / 3   # 0.333333333333  Conversion between integer and floating-point number:   int(x)  : convert x to integer  long(x)  : convert x to long integer  float(x)  : convert x to floating-point number   Example:  print int(12.3)     # 12\nprint int( 234 )    # 234\nprint long(5.6)     # 5\nprint float(12)     # 12.0", 
            "title": "Number"
        }, 
        {
            "location": "/core/boolean/", 
            "text": "Boolean\n\n\nBooleans are used to show the logical truth values \nTrue\n and \nFalse\n.\n\n\nConstants\n\n\n\n\nTrue\n\n\nFalse\n\n\n\n\nThe following values are considered \nFalse\n: None, False, 0, 0L, 0.0, '', (), [], {}, set([])\n\n\nConvert value to boolean\n\n\n\n\nbool(x)\n : convert x to True or False\n\n\n\n\nLogical operations\n\n\n\n\nand\n : x and y, if x if false then x, else y\n\n\nor\n : x or y, if x is false, then y, else x\n\n\nnot\n : not x, if x is false, then True, else False\n\n\n\n\nExample\n\n\nprint True              # True\nprint 1 \n 2             # True\nprint 2 \n 3             # False\nprint 3 \n= 3            # True\nprint 1 \n 2 and 2 \n 3   # False\nprint 1 \n 2 or 2 \n 3    # True\nprint not 1 \n 2         # False\nprint bool(0)           # False\nprint bool([])          # False\nprint bool(3)           # True\n\n\n\n\nReference\n\n\n\n\nstandard types, docs.python.org", 
            "title": "Boolean"
        }, 
        {
            "location": "/core/boolean/#boolean", 
            "text": "Booleans are used to show the logical truth values  True  and  False .", 
            "title": "Boolean"
        }, 
        {
            "location": "/core/boolean/#constants", 
            "text": "True  False   The following values are considered  False : None, False, 0, 0L, 0.0, '', (), [], {}, set([])", 
            "title": "Constants"
        }, 
        {
            "location": "/core/boolean/#convert-value-to-boolean", 
            "text": "bool(x)  : convert x to True or False", 
            "title": "Convert value to boolean"
        }, 
        {
            "location": "/core/boolean/#logical-operations", 
            "text": "and  : x and y, if x if false then x, else y  or  : x or y, if x is false, then y, else x  not  : not x, if x is false, then True, else False", 
            "title": "Logical operations"
        }, 
        {
            "location": "/core/boolean/#example", 
            "text": "print True              # True\nprint 1   2             # True\nprint 2   3             # False\nprint 3  = 3            # True\nprint 1   2 and 2   3   # False\nprint 1   2 or 2   3    # True\nprint not 1   2         # False\nprint bool(0)           # False\nprint bool([])          # False\nprint bool(3)           # True", 
            "title": "Example"
        }, 
        {
            "location": "/core/boolean/#reference", 
            "text": "standard types, docs.python.org", 
            "title": "Reference"
        }, 
        {
            "location": "/core/comparison/", 
            "text": "Comparison\n\n\nComparison operations are supported by all objects. They all have the same priority (which is higher than that of the Boolean operations).\n\n\nOperations\n\n\n\n\n : strictly less than\n\n\n=\n : less than or equal\n\n\n : strictly greater than\n\n\n=\n : greater than or equal\n\n\n==\n : equal\n\n\n!=\n : not equal\n\n\nis\n : object identity\n\n\nis not\n : negated object identity\n\n\n\n\nExample\n\n\nprint 2 != 3            # True\nprint 5 \n= 4            # True\nprint 2 is 2            # True\nprint 300 is 300        # True\n\nnum = 350\nprint num is not 350    # False\n\n\n\n\nReference\n\n\n\n\nComparisons - docs.python.org", 
            "title": "Comparison"
        }, 
        {
            "location": "/core/comparison/#comparison", 
            "text": "Comparison operations are supported by all objects. They all have the same priority (which is higher than that of the Boolean operations).", 
            "title": "Comparison"
        }, 
        {
            "location": "/core/comparison/#operations", 
            "text": ": strictly less than  =  : less than or equal   : strictly greater than  =  : greater than or equal  ==  : equal  !=  : not equal  is  : object identity  is not  : negated object identity", 
            "title": "Operations"
        }, 
        {
            "location": "/core/comparison/#example", 
            "text": "print 2 != 3            # True\nprint 5  = 4            # True\nprint 2 is 2            # True\nprint 300 is 300        # True\n\nnum = 350\nprint num is not 350    # False", 
            "title": "Example"
        }, 
        {
            "location": "/core/comparison/#reference", 
            "text": "Comparisons - docs.python.org", 
            "title": "Reference"
        }, 
        {
            "location": "/core/none/", 
            "text": "None\n\n\nNone is frequently used to represent the absence of a value, as when default arguments are not passed to a function.\n\n\nExample\n\n\na = None\nprint a             # None\nprint a is None     # True\n\n\n\n\nReference\n\n\n\n\nNone - docs.python.org", 
            "title": "None"
        }, 
        {
            "location": "/core/none/#none", 
            "text": "None is frequently used to represent the absence of a value, as when default arguments are not passed to a function.", 
            "title": "None"
        }, 
        {
            "location": "/core/none/#example", 
            "text": "a = None\nprint a             # None\nprint a is None     # True", 
            "title": "Example"
        }, 
        {
            "location": "/core/none/#reference", 
            "text": "None - docs.python.org", 
            "title": "Reference"
        }, 
        {
            "location": "/core/string/", 
            "text": "String\n\n\nYou can define a string using two single-quote or two double-quote, or two triple-quote, for example \ns = \"hello\"\n, once you have a string, below are listed the string methods you can apply to.\n\n\nFunctions\n\n\n\n\nstr.capitalize()\n\n\nstr.center(width[, fillchar])\n\n\nstr.count(sub[, start[, end]])\n\n\nstr.endswith(suffix)\n\n\nstr.expandtabs([tabsize])\n\n\nstr.find(sub[, start[, end]])\n\n\nstr.format(*args, **kwargs)\n\n\nstr.index(sub[, start[, end]])\n\n\nstr.isalnum()\n\n\nstr.isalpha()\n\n\nstr.isdigit()\n\n\nstr.islower()\n\n\nstr.isnumeric()\n\n\nstr.isspace()\n\n\nstr.istitle()\n\n\nstr.isupper()\n\n\nstr.join(iterable)\n\n\nstr.ljust(width[, fillchar])\n\n\nstr.lower()\n\n\nstr.lstrip([chars])\n\n\nstr.partition(seq)\n\n\nstr.replace(old, new[, count])\n\n\nstr.rfind(sub[, start[, end]])\n\n\nstr.rindex(sub[, start[, end]])\n\n\nstr.rjust(width[, fillchar])\n\n\nstr.rpartition(seq)\n\n\nstr.rstrip([chars])\n\n\nstr.split([sep[, maxsplit]])\n\n\nstr.splitlines([keepends])\n\n\nstr.startswith(prefix[, start[, end]])\n\n\nstr.strip([chars])\n\n\nstr.swapcase()\n\n\nstr.title()\n\n\nstr.upper()\n\n\nstr.zfill(width)\n\n\n\n\nFor how to use above functions, check \nString Methods on Python official documentation\n.\n\n\nExample\n\n\na = \nhello world\n\nprint a.capitalize()        # Hello world\nprint a.upper()             # HELLO WORLD\nprint a.find(\nworld\n)       # 6\nprint a.split()             # ['hello', 'world']\nprint a.isalnum()           # False\n\nb = \nhello {0} {1}\n\nprint b.format(\nAlbert\n, \nEinstein\n)    # hello Albert Einstein\n\n\n\n\nReference\n\n\n\n\nString methods - docs.python.org", 
            "title": "String"
        }, 
        {
            "location": "/core/string/#string", 
            "text": "You can define a string using two single-quote or two double-quote, or two triple-quote, for example  s = \"hello\" , once you have a string, below are listed the string methods you can apply to.", 
            "title": "String"
        }, 
        {
            "location": "/core/string/#functions", 
            "text": "str.capitalize()  str.center(width[, fillchar])  str.count(sub[, start[, end]])  str.endswith(suffix)  str.expandtabs([tabsize])  str.find(sub[, start[, end]])  str.format(*args, **kwargs)  str.index(sub[, start[, end]])  str.isalnum()  str.isalpha()  str.isdigit()  str.islower()  str.isnumeric()  str.isspace()  str.istitle()  str.isupper()  str.join(iterable)  str.ljust(width[, fillchar])  str.lower()  str.lstrip([chars])  str.partition(seq)  str.replace(old, new[, count])  str.rfind(sub[, start[, end]])  str.rindex(sub[, start[, end]])  str.rjust(width[, fillchar])  str.rpartition(seq)  str.rstrip([chars])  str.split([sep[, maxsplit]])  str.splitlines([keepends])  str.startswith(prefix[, start[, end]])  str.strip([chars])  str.swapcase()  str.title()  str.upper()  str.zfill(width)   For how to use above functions, check  String Methods on Python official documentation .", 
            "title": "Functions"
        }, 
        {
            "location": "/core/string/#example", 
            "text": "a =  hello world \nprint a.capitalize()        # Hello world\nprint a.upper()             # HELLO WORLD\nprint a.find( world )       # 6\nprint a.split()             # ['hello', 'world']\nprint a.isalnum()           # False\n\nb =  hello {0} {1} \nprint b.format( Albert ,  Einstein )    # hello Albert Einstein", 
            "title": "Example"
        }, 
        {
            "location": "/core/string/#reference", 
            "text": "String methods - docs.python.org", 
            "title": "Reference"
        }, 
        {
            "location": "/core/function/", 
            "text": "Functions\n\n\nBuilt-in functions\n\n\n\n\nabs\n\n\nall\n\n\nany\n\n\nbin\n\n\nbool\n\n\nchr\n\n\ndict\n\n\ndir\n\n\ndivmod\n\n\nenumerate\n\n\nfilter\n\n\nfloat\n\n\nhex\n\n\nint\n\n\nisinstance\n\n\nissubclass\n\n\nlen\n\n\nlist\n\n\nlong\n\n\nmap\n\n\nmax\n\n\nmin\n\n\noct\n\n\nord\n\n\npow\n\n\nprint\n\n\nrange\n\n\nraw_input\n\n\nreduce\n\n\nrepr\n\n\nreversed\n\n\nround\n\n\nset\n\n\nslice\n\n\nsorted\n\n\nstr\n\n\nsum\n\n\ntuple\n\n\nxrange\n\n\nzip\n\n\n\n\nFor how to use above functions, check \nbuilt-in functions on Python official documentation\n.\n\n\nExample\n\n\nprint bin(3)        # 0b11\nprint hex(255)      # 0xff\nprint abs(-5)       # 5\nprint pow(3, 2)     # 9\nprint round(3.5)    # 4.0\nprint round(3.2)    # 3.0\nprint oct(8)        # 010\nprint ord('A')      # 65\nprint chr(97)       # a\n\na = [1,4,5,2,3]\nprint sorted(a)     # [1, 2, 3, 4, 5]\n\n\n\n\nUser-defined functions\n\n\nYou can define your own function by using \ndef\n.\n\n\nExample:\n\n\ndef my_add(a, b):\n    c = a + b\n    return c\n\nprint my_add(1, 2)  # 3\n\n\n\n\nReference\n\n\n\n\nBuilt-in function - docs.python.org", 
            "title": "Function"
        }, 
        {
            "location": "/core/function/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/core/function/#built-in-functions", 
            "text": "abs  all  any  bin  bool  chr  dict  dir  divmod  enumerate  filter  float  hex  int  isinstance  issubclass  len  list  long  map  max  min  oct  ord  pow  print  range  raw_input  reduce  repr  reversed  round  set  slice  sorted  str  sum  tuple  xrange  zip   For how to use above functions, check  built-in functions on Python official documentation .", 
            "title": "Built-in functions"
        }, 
        {
            "location": "/core/function/#example", 
            "text": "print bin(3)        # 0b11\nprint hex(255)      # 0xff\nprint abs(-5)       # 5\nprint pow(3, 2)     # 9\nprint round(3.5)    # 4.0\nprint round(3.2)    # 3.0\nprint oct(8)        # 010\nprint ord('A')      # 65\nprint chr(97)       # a\n\na = [1,4,5,2,3]\nprint sorted(a)     # [1, 2, 3, 4, 5]", 
            "title": "Example"
        }, 
        {
            "location": "/core/function/#user-defined-functions", 
            "text": "You can define your own function by using  def .  Example:  def my_add(a, b):\n    c = a + b\n    return c\n\nprint my_add(1, 2)  # 3", 
            "title": "User-defined functions"
        }, 
        {
            "location": "/core/function/#reference", 
            "text": "Built-in function - docs.python.org", 
            "title": "Reference"
        }, 
        {
            "location": "/core/list/", 
            "text": "List\n\n\nList is used to group together values, can be written as a list of comma-separated values (items) between square brackets. Lists might contain items of different types, but usually the items all have the same type.\n\n\nList's index starts from 0, and you can visit last element using index -1:\n\n\na = [1, 5, 2, 3]\nprint a[0]          # 1\nprint a[1]          # 5\nprint a[-1]         # 3\nprint a[1:3]        # Get elements from index 1 to index 3 (exclusive), i.e. [5, 2]\n\n\n\n\nChange element at a index:\n\n\na = [1, 5, 2, 3]\na[1] = 7\nprint a             # [1, 7, 2, 3]\n\n\n\n\nTo check if one element in a list, you can use \nin\n:\n\n\na = [1, 5, 2, 3]\nprint 5 in a       # True\n\n\n\n\nUse function \nlen\n to get length (how many elements) of a list:\n\n\na = [1, 5, 2, 3]\nprint len(a)       # 4\n\n\n\n\nFunctions\n\n\n\n\nlist.append(x)\n\n\nlist.count(x)\n\n\nlist.extend(L)\n\n\nlist.index(x)\n\n\nlist.insert(i, x)\n\n\nlist.pop([i])\n\n\nlist.remove(x)\n\n\nlist.reverse()\n\n\nlist.sort(cmp=None, key=None, reverse=False)\n\n\n\n\nFor how to use those functions, check \nlists method on Python official documentation\n  \n\n\nExample\n\n\na = [1, 5, 2, 3]\na.append(6)\nprint a             # [1, 5, 2, 3, 6]\nprint a.count(5)    # 1\na.remove(2)\nprint a             # [1, 5, 3, 6]\na.reverse()\nprint a             # [6, 3, 5, 1]\na.sort()\nprint a             # [1, 3, 5, 6]\n\n\n\n\nTuple\n\n\nTuple is similar with list, the main difference is list is mutable and tuple is immutable. Once you defined a tuple with parentheses \n()\n, you can not change its element.\n\n\nb = (1, 5, 2, 3)\nb.append(6)     # this will give an error, since b is a tuple and immutable\n\n\n\n\nConversion between tuple and list\n\n\nThough a tuple can not be changed, you can convert it to list, make some changes, then convert it back to tuple. You can do this with \ntuple\n and \nlist\n function.\n\n\nb = (1, 5, 2, 3)\nb = list(b)         # Convert tuple to list\nb.append(6)         # Change list - append one more element\nb = tuple(b)        # Convert list to tuple\nprint b             # (1, 5, 2, 3, 6)\n\n\n\n\nReference\n\n\n\n\nIntroduction of List - docs.python.org\n\n\nMore on Lists - docs.python.org", 
            "title": "List & Tuple"
        }, 
        {
            "location": "/core/list/#list", 
            "text": "List is used to group together values, can be written as a list of comma-separated values (items) between square brackets. Lists might contain items of different types, but usually the items all have the same type.  List's index starts from 0, and you can visit last element using index -1:  a = [1, 5, 2, 3]\nprint a[0]          # 1\nprint a[1]          # 5\nprint a[-1]         # 3\nprint a[1:3]        # Get elements from index 1 to index 3 (exclusive), i.e. [5, 2]  Change element at a index:  a = [1, 5, 2, 3]\na[1] = 7\nprint a             # [1, 7, 2, 3]  To check if one element in a list, you can use  in :  a = [1, 5, 2, 3]\nprint 5 in a       # True  Use function  len  to get length (how many elements) of a list:  a = [1, 5, 2, 3]\nprint len(a)       # 4", 
            "title": "List"
        }, 
        {
            "location": "/core/list/#functions", 
            "text": "list.append(x)  list.count(x)  list.extend(L)  list.index(x)  list.insert(i, x)  list.pop([i])  list.remove(x)  list.reverse()  list.sort(cmp=None, key=None, reverse=False)   For how to use those functions, check  lists method on Python official documentation", 
            "title": "Functions"
        }, 
        {
            "location": "/core/list/#example", 
            "text": "a = [1, 5, 2, 3]\na.append(6)\nprint a             # [1, 5, 2, 3, 6]\nprint a.count(5)    # 1\na.remove(2)\nprint a             # [1, 5, 3, 6]\na.reverse()\nprint a             # [6, 3, 5, 1]\na.sort()\nprint a             # [1, 3, 5, 6]", 
            "title": "Example"
        }, 
        {
            "location": "/core/list/#tuple", 
            "text": "Tuple is similar with list, the main difference is list is mutable and tuple is immutable. Once you defined a tuple with parentheses  () , you can not change its element.  b = (1, 5, 2, 3)\nb.append(6)     # this will give an error, since b is a tuple and immutable", 
            "title": "Tuple"
        }, 
        {
            "location": "/core/list/#conversion-between-tuple-and-list", 
            "text": "Though a tuple can not be changed, you can convert it to list, make some changes, then convert it back to tuple. You can do this with  tuple  and  list  function.  b = (1, 5, 2, 3)\nb = list(b)         # Convert tuple to list\nb.append(6)         # Change list - append one more element\nb = tuple(b)        # Convert list to tuple\nprint b             # (1, 5, 2, 3, 6)", 
            "title": "Conversion between tuple and list"
        }, 
        {
            "location": "/core/list/#reference", 
            "text": "Introduction of List - docs.python.org  More on Lists - docs.python.org", 
            "title": "Reference"
        }, 
        {
            "location": "/core/set/", 
            "text": "Set\n\n\nA set is an unordered collection with no duplicate elements. Basic uses include membership testing and eliminating duplicate entries. Set objects also support mathematical operations like union, intersection, difference, and symmetric difference.\n\n\nYou can use \nset()\n to get a set, here is a quick example:\n\n\nbasket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']\nfruit = set(basket)\nprint fruit     # set(['apple', 'orange', 'pear', 'banana'])\n\n\n\n\nFunctions\n\n\n\n\nset.add(elem)\n : Add element elem to the set.\n\n\nset.copy()\n : Return a new set with a shallow copy of s.\n\n\nset.difference(other)\n : Return a new set with elements in the set that are not in the others.\n\n\nset.difference_update(other)\n : Update the set, removing elements found in others.\n\n\nset.discard(elem)\n : Remove element elem from the set if it is present.\n\n\nset.intersection(other)\n : Return a new set with elements common to the set and all others.\n\n\nset.intersection_update(other)\n: Update the set, keeping only elements found in it and all others.\n\n\nset.isdisjoint(other)\n : Return True if the set has no elements in common with other. Sets are disjoint if and only if their intersection is the empty set.\n\n\nset.issubset(other)\n : Test whether every element in the set is in other.\n\n\nset.issuperset(other)\n : Test whether every element in other is in the set.\n\n\nset.pop()\n : Remove and return an arbitrary element from the set.\n\n\nset.remove(elem)\n : Remove element elem from the set.  \n\n\nset.symmetric_difference(other)\n : Return a new set with elements in either the set or other but not both.\n\n\nset.symmetric_difference_update(other)\n : Update the set, keeping only elements found in either set, but not in both.\n\n\nset.union(other)\n : Return a new set with elements from the set and all others.\n\n\nset.update(other)\n : Update the set, adding elements from all others.\n\n\n\n\n*Notice:\n The official Python support using mathematical operator with sets, for example, if we have two sets a and b, \na - b\n is the same as \na.difference(b)\n, however, PythonMini doesn't support those operators at this moment.\n\n\nExample\n\n\na = set()\na.add(1)\na.add(2)\na.add(1)\n\nprint a                 # set([1, 2])\nprint len(a)            # 2\n\nb = set([2,2,3])\nprint b                 # set([2, 3])\n\nprint a.intersection(b) # set([2])\nprint a.union(b)        # set([1, 2, 3])\n\nc = set([3])\nprint b.issuperset(c)   # True\n\n\n\n\nReference\n\n\n\n\nSets - docs.python.org\n\n\nSet - docs.python.org", 
            "title": "Set"
        }, 
        {
            "location": "/core/set/#set", 
            "text": "A set is an unordered collection with no duplicate elements. Basic uses include membership testing and eliminating duplicate entries. Set objects also support mathematical operations like union, intersection, difference, and symmetric difference.  You can use  set()  to get a set, here is a quick example:  basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']\nfruit = set(basket)\nprint fruit     # set(['apple', 'orange', 'pear', 'banana'])", 
            "title": "Set"
        }, 
        {
            "location": "/core/set/#functions", 
            "text": "set.add(elem)  : Add element elem to the set.  set.copy()  : Return a new set with a shallow copy of s.  set.difference(other)  : Return a new set with elements in the set that are not in the others.  set.difference_update(other)  : Update the set, removing elements found in others.  set.discard(elem)  : Remove element elem from the set if it is present.  set.intersection(other)  : Return a new set with elements common to the set and all others.  set.intersection_update(other) : Update the set, keeping only elements found in it and all others.  set.isdisjoint(other)  : Return True if the set has no elements in common with other. Sets are disjoint if and only if their intersection is the empty set.  set.issubset(other)  : Test whether every element in the set is in other.  set.issuperset(other)  : Test whether every element in other is in the set.  set.pop()  : Remove and return an arbitrary element from the set.  set.remove(elem)  : Remove element elem from the set.    set.symmetric_difference(other)  : Return a new set with elements in either the set or other but not both.  set.symmetric_difference_update(other)  : Update the set, keeping only elements found in either set, but not in both.  set.union(other)  : Return a new set with elements from the set and all others.  set.update(other)  : Update the set, adding elements from all others.   *Notice:  The official Python support using mathematical operator with sets, for example, if we have two sets a and b,  a - b  is the same as  a.difference(b) , however, PythonMini doesn't support those operators at this moment.", 
            "title": "Functions"
        }, 
        {
            "location": "/core/set/#example", 
            "text": "a = set()\na.add(1)\na.add(2)\na.add(1)\n\nprint a                 # set([1, 2])\nprint len(a)            # 2\n\nb = set([2,2,3])\nprint b                 # set([2, 3])\n\nprint a.intersection(b) # set([2])\nprint a.union(b)        # set([1, 2, 3])\n\nc = set([3])\nprint b.issuperset(c)   # True", 
            "title": "Example"
        }, 
        {
            "location": "/core/set/#reference", 
            "text": "Sets - docs.python.org  Set - docs.python.org", 
            "title": "Reference"
        }, 
        {
            "location": "/core/dictionary/", 
            "text": "Dictionary\n\n\nDictionaries are sometimes found in other languages as \u201cassociative memories\u201d or \u201cassociative arrays\u201d. Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by keys, which can be any immutable type.\n\n\nIt is best to think of a dictionary as an unordered set of key: value pairs, with the requirement that the keys are unique (within one dictionary). A pair of braces creates an empty dictionary: {}. Placing a comma-separated list of key:value pairs within the braces adds initial key:value pairs to the dictionary.\n\n\nFunctions\n\n\n\n\ndict.clear()\n : Remove all items from the dictionary.\n\n\ndict.get(key[, default])\n : Return the value for key if key is in the dictionary, else default. If default is not given, it defaults to None, so that this method never raises a KeyError.\n\n\ndict.has_key(key)\n : Test for the presence of key in the dictionary.\n\n\ndict.items()\n : Return a copy of the dictionary\u2019s list of (key, value) pairs.\n\n\ndict.keys()\n : Return a copy of the dictionary\u2019s list of keys.\n\n\ndict.pop(key[, default])\n : If key is in the dictionary, remove it and return its value, else return default. If default is not given and key is not in the dictionary, a KeyError is raised.\n\n\ndict.setdefault(key[, default])\n : If key is in the dictionary, return its value. If not, insert key with a value of default and return default. default defaults to None.\n\n\ndict.update([other])\n : Update the dictionary with the key/value pairs from other, overwriting existing keys. Return None.\n\n\ndict.values()\n : Return a copy of the dictionary\u2019s list of values.\n\n\n\n\nExample\n\n\na = {\nname\n: \nBo\n, \nage\n: 20}\nprint a.has_key(\nname\n)             # True\nprint a.keys()                      # ['name', 'age']\nprint a.values()                    # ['Bo', 20]\na.setdefault(\ngender\n, \nm\n)         \nprint a                             # {'name': 'Bo', 'age': 20, 'gender': 'm'}\na.update({\ncity\n: \nStony Brook\n})   \nprint a                 # {'name': 'Bo', 'age': 20, 'gender': 'm', 'city': 'Stony Brook'}\n\n\n\n\nReference\n\n\n\n\nData structure: dictionary - docs.python.org\n\n\nMapping Type - Dict", 
            "title": "Dictionary"
        }, 
        {
            "location": "/core/dictionary/#dictionary", 
            "text": "Dictionaries are sometimes found in other languages as \u201cassociative memories\u201d or \u201cassociative arrays\u201d. Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by keys, which can be any immutable type.  It is best to think of a dictionary as an unordered set of key: value pairs, with the requirement that the keys are unique (within one dictionary). A pair of braces creates an empty dictionary: {}. Placing a comma-separated list of key:value pairs within the braces adds initial key:value pairs to the dictionary.", 
            "title": "Dictionary"
        }, 
        {
            "location": "/core/dictionary/#functions", 
            "text": "dict.clear()  : Remove all items from the dictionary.  dict.get(key[, default])  : Return the value for key if key is in the dictionary, else default. If default is not given, it defaults to None, so that this method never raises a KeyError.  dict.has_key(key)  : Test for the presence of key in the dictionary.  dict.items()  : Return a copy of the dictionary\u2019s list of (key, value) pairs.  dict.keys()  : Return a copy of the dictionary\u2019s list of keys.  dict.pop(key[, default])  : If key is in the dictionary, remove it and return its value, else return default. If default is not given and key is not in the dictionary, a KeyError is raised.  dict.setdefault(key[, default])  : If key is in the dictionary, return its value. If not, insert key with a value of default and return default. default defaults to None.  dict.update([other])  : Update the dictionary with the key/value pairs from other, overwriting existing keys. Return None.  dict.values()  : Return a copy of the dictionary\u2019s list of values.", 
            "title": "Functions"
        }, 
        {
            "location": "/core/dictionary/#example", 
            "text": "a = { name :  Bo ,  age : 20}\nprint a.has_key( name )             # True\nprint a.keys()                      # ['name', 'age']\nprint a.values()                    # ['Bo', 20]\na.setdefault( gender ,  m )         \nprint a                             # {'name': 'Bo', 'age': 20, 'gender': 'm'}\na.update({ city :  Stony Brook })   \nprint a                 # {'name': 'Bo', 'age': 20, 'gender': 'm', 'city': 'Stony Brook'}", 
            "title": "Example"
        }, 
        {
            "location": "/core/dictionary/#reference", 
            "text": "Data structure: dictionary - docs.python.org  Mapping Type - Dict", 
            "title": "Reference"
        }, 
        {
            "location": "/core/stdoutin/", 
            "text": "Standard output and input\n\n\nStandard output\n\n\nThe most common way to output something is using \nprint\n function:\n\n\nprint 2 * 3\nprint \nhello\n\narr = [1, 2, 3, 4]\nprint arr\n\n\n\n\nOutput:\n\n\n6\nhello\n[1, 2, 3, 4]\n\n\n\n\nor you can use \nsys.stdout.write\n:\n\n\nfrom sys import stdout\narr = [1, 2, 3, 4]\nstdout.write(\nhello \n)\nstdout.write(arr)\n\n\n\n\nOutput:\n\n\nhello 1,2,3,4\n\n\n\n\nStandard input\n\n\nTo get user input, you can use \nraw_input\n function:\n\n\nname = raw_input(\nWhat's your name?\n)\nprint \nhello\n, name\n\n\n\n\nWhat you get from \nraw_input\n will always be string, even it looks like a number, for example:\n\n\nnum = raw_input(\nGive me a number\n)\nprint num               # 12\nprint num * 2           # 1212\n\n# now convert it to number\nnum = int(num)\nprint num * 2           # 24\n\n\n\n\nYou can also read user's input by using \nsys.stdin.read\n or \nsys.stdin.readline\n:\n\n\nfrom sys import stdin\n\nname = stdin.readline()\nprint name\n\n# Only read 3 characters\nname = stdin.readline(3)\nprint name", 
            "title": "Standard output & input"
        }, 
        {
            "location": "/core/stdoutin/#standard-output-and-input", 
            "text": "", 
            "title": "Standard output and input"
        }, 
        {
            "location": "/core/stdoutin/#standard-output", 
            "text": "The most common way to output something is using  print  function:  print 2 * 3\nprint  hello \narr = [1, 2, 3, 4]\nprint arr  Output:  6\nhello\n[1, 2, 3, 4]  or you can use  sys.stdout.write :  from sys import stdout\narr = [1, 2, 3, 4]\nstdout.write( hello  )\nstdout.write(arr)  Output:  hello 1,2,3,4", 
            "title": "Standard output"
        }, 
        {
            "location": "/core/stdoutin/#standard-input", 
            "text": "To get user input, you can use  raw_input  function:  name = raw_input( What's your name? )\nprint  hello , name  What you get from  raw_input  will always be string, even it looks like a number, for example:  num = raw_input( Give me a number )\nprint num               # 12\nprint num * 2           # 1212\n\n# now convert it to number\nnum = int(num)\nprint num * 2           # 24  You can also read user's input by using  sys.stdin.read  or  sys.stdin.readline :  from sys import stdin\n\nname = stdin.readline()\nprint name\n\n# Only read 3 characters\nname = stdin.readline(3)\nprint name", 
            "title": "Standard input"
        }, 
        {
            "location": "/stdmod/collections/", 
            "text": "collections \u2014 High-performance container datatypes\n\n\nThis module implements the following specialized container datatypes:\n\n\nObjects\n\n\n\n\nnamedtuple\n: factory function for creating tuple subclasses with named fields\n\n\ndeque\n: list-like container with fast appends and pops on either end\n\n\nCounter\n: dict subclass for counting hashable objects\n\n\nOrderedDict\n: dict subclass that remembers the order entries were added\n\n\ndefaultdict\n: dict subclass that calls a factory function to supply missing values\n\n\n\n\nFor more information and how to use those objects, check \nPython Collections Module documentation\n.\n\n\nExample\n\n\nimport collections\n\nc = collections.Counter('gallahad')\nprint c[\na\n]\n# 3\nprint c.most_common(1)\n# [('a', 3)]\n\nPoint = collections.namedtuple('Point', ['x', 'y'])\np = Point(1,2)\nprint p.x\n# 1\nprint p.y\n# 2", 
            "title": "collections"
        }, 
        {
            "location": "/stdmod/collections/#collections-high-performance-container-datatypes", 
            "text": "This module implements the following specialized container datatypes:", 
            "title": "collections \u2014 High-performance container datatypes"
        }, 
        {
            "location": "/stdmod/collections/#objects", 
            "text": "namedtuple : factory function for creating tuple subclasses with named fields  deque : list-like container with fast appends and pops on either end  Counter : dict subclass for counting hashable objects  OrderedDict : dict subclass that remembers the order entries were added  defaultdict : dict subclass that calls a factory function to supply missing values   For more information and how to use those objects, check  Python Collections Module documentation .", 
            "title": "Objects"
        }, 
        {
            "location": "/stdmod/collections/#example", 
            "text": "import collections\n\nc = collections.Counter('gallahad')\nprint c[ a ]\n# 3\nprint c.most_common(1)\n# [('a', 3)]\n\nPoint = collections.namedtuple('Point', ['x', 'y'])\np = Point(1,2)\nprint p.x\n# 1\nprint p.y\n# 2", 
            "title": "Example"
        }, 
        {
            "location": "/stdmod/json/", 
            "text": "json\n\n\nJSON (JavaScript Object Notation), specified by RFC 7159 (which obsoletes RFC 4627) and by ECMA-404, is a lightweight data interchange format inspired by JavaScript object literal syntax.\n\n\nFunctions\n\n\n\n\njson.dumps(object)\n: Serialize obj to a JSON formatted string\n\n\njson.loads(string)\n: Deserialize a string to a Python object\n\n\n\n\nExample\n\n\nimport json\n\nstudent = {\n    \nname\n: \nNick\n,\n    \ngrade\n: 5\n}\n\n# s is a string\ns = json.dumps(student)\nprint s\n\n# o is an object\no = json.loads(s)\nprint o[\nname\n]", 
            "title": "json"
        }, 
        {
            "location": "/stdmod/json/#json", 
            "text": "JSON (JavaScript Object Notation), specified by RFC 7159 (which obsoletes RFC 4627) and by ECMA-404, is a lightweight data interchange format inspired by JavaScript object literal syntax.", 
            "title": "json"
        }, 
        {
            "location": "/stdmod/json/#functions", 
            "text": "json.dumps(object) : Serialize obj to a JSON formatted string  json.loads(string) : Deserialize a string to a Python object", 
            "title": "Functions"
        }, 
        {
            "location": "/stdmod/json/#example", 
            "text": "import json\n\nstudent = {\n     name :  Nick ,\n     grade : 5\n}\n\n# s is a string\ns = json.dumps(student)\nprint s\n\n# o is an object\no = json.loads(s)\nprint o[ name ]", 
            "title": "Example"
        }, 
        {
            "location": "/stdmod/math/", 
            "text": "math \u2014 Mathematical functions\n\n\n\n\n\nThis module contains some mathematical operations (subset of Python's standard \nmath\n module), to use it, make sure use \nimport math\n first to import it.\n\n\nConstants\n\n\n\n\nmath.e\n : The mathematical constant e = 2.718281..., to available precision\n\n\nmath.pi\n : The mathematical constant \u03c0 = 3.141592..., to available precision.\n\n\n\n\nFunctions\n\n\n\n\nmath.acos(x)\n : Return the arc cosine of x, in radians.\n\n\nmath.acosh(x)\n : Return the inverse hyperbolic cosine of x.\n\n\nmath.asin(x)\n : Return the arc sine of x, in radians.\n\n\nmath.asinh(x)\n : Return the inverse hyperbolic sine of x.\n\n\nmath.atan(x)\n : Return the arc tangent of x, in radians.\n\n\nmath.atan2(y, x)\n : Return atan(y / x), in radians. The result is between -pi and pi.\n\n\nmath.atanh(x)\n : Return the inverse hyperbolic tangent of x.\n\n\nmath.ceil(x)\n : Return the ceiling of x as a float, the smallest integer value greater than or equal to x.\n\n\nmath.copysign(x, y)\n: Return x with the sign of y. On a platform that supports signed zeros, copysign(1.0, -0.0) returns -1.0.\n\n\nmath.cos(x)\n : Return the cosine of x radians.\n\n\nmath.cosh(x)\n : Return the hyperbolic cosine of x.\n\n\nmath.degrees(x)\n : Convert angle x from radians to degrees.\n\n\nmath.exp(x)\n : Return e**x.\n\n\nmath.fabs(x)\n : Return the absolute value of x.\n\n\nmath.factorial(x)\n : Return x factorial.\n\n\nmath.floor(x)\n : Return the floor of x as a float, the largest integer value less than or equal to x.\n\n\nmath.hypot(x, y)\n : Return the Euclidean norm, sqrt(x\nx + y\ny). This is the length of the vector from the origin to point (x, y).\n\n\nmath.log(x[,base])\n : With one argument, return the natural logarithm of x (to base e). With two arguments, return the logarithm of x to the given base, calculated as log(x)/log(base).\n\n\nmath.log10(x)\n : Return the base-10 logarithm of x. This is usually more accurate than log(x, 10).\n\n\nmath.pow(x, y)\n : Return x raised to the power y.\n\n\nmath.radians\n : Convert angle x from degrees to radians.\n\n\nmath.sin(x)\n : Return the sine of x radians.\n\n\nmath.sinh(x)\n : Return the hyperbolic sine of x.\n\n\nmath.sqrt(x)\n : Return the square root of x.\n\n\nmath.tan(x)\n : Return the tangent of x radians.\n\n\nmath.tanh(x)\n : Return the hyperbolic tangent of x.\n\n\nmath.trunc(x)\n : Return the Real value x truncated to an Integral (usually a long integer).\n\n\n\n\nExample\n\n\nimport math\n\nprint math.pi\n# 3.14159265359\n\nprint math.sqrt(4)\n# 2.0\n\nprint math.sin(math.pi/6)\n# 0.5\n\nprint math.degrees(math.pi/6)\n# 30.0\n\n\n\n\nReference\n\n\n\n\nPython Math Module, python.org", 
            "title": "math"
        }, 
        {
            "location": "/stdmod/math/#math-mathematical-functions", 
            "text": "This module contains some mathematical operations (subset of Python's standard  math  module), to use it, make sure use  import math  first to import it.", 
            "title": "math \u2014 Mathematical functions"
        }, 
        {
            "location": "/stdmod/math/#constants", 
            "text": "math.e  : The mathematical constant e = 2.718281..., to available precision  math.pi  : The mathematical constant \u03c0 = 3.141592..., to available precision.", 
            "title": "Constants"
        }, 
        {
            "location": "/stdmod/math/#functions", 
            "text": "math.acos(x)  : Return the arc cosine of x, in radians.  math.acosh(x)  : Return the inverse hyperbolic cosine of x.  math.asin(x)  : Return the arc sine of x, in radians.  math.asinh(x)  : Return the inverse hyperbolic sine of x.  math.atan(x)  : Return the arc tangent of x, in radians.  math.atan2(y, x)  : Return atan(y / x), in radians. The result is between -pi and pi.  math.atanh(x)  : Return the inverse hyperbolic tangent of x.  math.ceil(x)  : Return the ceiling of x as a float, the smallest integer value greater than or equal to x.  math.copysign(x, y) : Return x with the sign of y. On a platform that supports signed zeros, copysign(1.0, -0.0) returns -1.0.  math.cos(x)  : Return the cosine of x radians.  math.cosh(x)  : Return the hyperbolic cosine of x.  math.degrees(x)  : Convert angle x from radians to degrees.  math.exp(x)  : Return e**x.  math.fabs(x)  : Return the absolute value of x.  math.factorial(x)  : Return x factorial.  math.floor(x)  : Return the floor of x as a float, the largest integer value less than or equal to x.  math.hypot(x, y)  : Return the Euclidean norm, sqrt(x x + y y). This is the length of the vector from the origin to point (x, y).  math.log(x[,base])  : With one argument, return the natural logarithm of x (to base e). With two arguments, return the logarithm of x to the given base, calculated as log(x)/log(base).  math.log10(x)  : Return the base-10 logarithm of x. This is usually more accurate than log(x, 10).  math.pow(x, y)  : Return x raised to the power y.  math.radians  : Convert angle x from degrees to radians.  math.sin(x)  : Return the sine of x radians.  math.sinh(x)  : Return the hyperbolic sine of x.  math.sqrt(x)  : Return the square root of x.  math.tan(x)  : Return the tangent of x radians.  math.tanh(x)  : Return the hyperbolic tangent of x.  math.trunc(x)  : Return the Real value x truncated to an Integral (usually a long integer).", 
            "title": "Functions"
        }, 
        {
            "location": "/stdmod/math/#example", 
            "text": "import math\n\nprint math.pi\n# 3.14159265359\n\nprint math.sqrt(4)\n# 2.0\n\nprint math.sin(math.pi/6)\n# 0.5\n\nprint math.degrees(math.pi/6)\n# 30.0", 
            "title": "Example"
        }, 
        {
            "location": "/stdmod/math/#reference", 
            "text": "Python Math Module, python.org", 
            "title": "Reference"
        }, 
        {
            "location": "/stdmod/operator/", 
            "text": "operator \u2014 Standard operators as functions\n\n\nThe operator module exports a set of efficient functions corresponding to the intrinsic operators of Python.\n\n\nFunctions\n\n\n\n\noperator.abs\n\n\noperator.add\n\n\noperator.and_\n\n\noperator.concat\n\n\noperator.contains\n\n\noperator.countOf\n\n\noperator.delitem\n\n\noperator.div\n\n\noperator.divmod\n\n\noperator.eq\n\n\noperator.floordiv\n\n\noperator.ge\n\n\noperator.getitem\n\n\noperator.gt\n\n\noperator.index\n\n\noperator.indexOf\n\n\noperator.inv\n\n\noperator.invert\n\n\noperator.is_\n\n\noperator.is_not\n\n\noperator.le\n\n\noperator.lshift\n\n\noperator.lt\n\n\noperator.mod\n\n\noperator.mul\n\n\noperator.ne\n\n\noperator.neg\n\n\noperator.not_\n\n\noperator.or_\n\n\noperator.pos\n\n\noperator.pow\n\n\noperator.rshift\n\n\noperator.setitem\n\n\noperator.sub\n\n\noperator.truediv\n\n\noperator.truth\n\n\noperator.xor\n\n\n\n\nFor more information on how to use those functions, please check Python's official documentation at \noperator module - docs.python.org\n.\n\n\nExample\n\n\nimport operator\n\nprint operator.lt(1, 2)\n# True\n\nprint operator.truth(0)\n# False\n\nprint operator.truth([])\n# False\n\nprint operator.truth(2)\n# True\n\nprint operator.countOf(\nhello world\n, \nl\n)\n# 3\n\n\n\n\nReference\n\n\n\n\noperator module - docs.python.org", 
            "title": "operator"
        }, 
        {
            "location": "/stdmod/operator/#operator-standard-operators-as-functions", 
            "text": "The operator module exports a set of efficient functions corresponding to the intrinsic operators of Python.", 
            "title": "operator \u2014 Standard operators as functions"
        }, 
        {
            "location": "/stdmod/operator/#functions", 
            "text": "operator.abs  operator.add  operator.and_  operator.concat  operator.contains  operator.countOf  operator.delitem  operator.div  operator.divmod  operator.eq  operator.floordiv  operator.ge  operator.getitem  operator.gt  operator.index  operator.indexOf  operator.inv  operator.invert  operator.is_  operator.is_not  operator.le  operator.lshift  operator.lt  operator.mod  operator.mul  operator.ne  operator.neg  operator.not_  operator.or_  operator.pos  operator.pow  operator.rshift  operator.setitem  operator.sub  operator.truediv  operator.truth  operator.xor   For more information on how to use those functions, please check Python's official documentation at  operator module - docs.python.org .", 
            "title": "Functions"
        }, 
        {
            "location": "/stdmod/operator/#example", 
            "text": "import operator\n\nprint operator.lt(1, 2)\n# True\n\nprint operator.truth(0)\n# False\n\nprint operator.truth([])\n# False\n\nprint operator.truth(2)\n# True\n\nprint operator.countOf( hello world ,  l )\n# 3", 
            "title": "Example"
        }, 
        {
            "location": "/stdmod/operator/#reference", 
            "text": "operator module - docs.python.org", 
            "title": "Reference"
        }, 
        {
            "location": "/stdmod/random/", 
            "text": "random \u2014 Generate pseudo-random numbers\n\n\n\n\n\nThis module implements a subset of Python standard \nrandom\n module, it contains pseudo-random number generators for various distributions. To use it, make sure include \nimport random\n first.\n\n\nFunctions\n\n\n\n\nrandom.choice(seq)\n : Return a random element from the non-empty sequence seq.\n\n\nrandom.randint(a, b)\n : Return a random integer N such that a \n= N \n= b\n\n\nrandom.random\n : Return the next random floating point number in the range [0.0, 1.0).\n\n\nrandom.randrange(stop)\n : See below.\n\n\nrandom.randrange(start, stop[, step])\n : Return a randomly selected element from \nrange(start, stop, step)\n. This is equivalent to \nchoice(range(start, stop, step))\n.\n\n\nrandom.sample(population, k)\n: Return a k length list of unique elements chosen from the population sequence.\n\n\nrandom.seed(x)\n : Initialize the basic random number generator.\n\n\nrandom.shuffle(x)\n : Shuffle the sequence x in place.\n\n\nrandom.triangular(low, high, mode)\n: Return a random floating point number N such that low \n= N \n= high and with the specified mode between those bounds.\n\n\nrandom.uniform(a, b)\n: Return a random floating point number N such that a \n= N \n= b for a \n= b and b \n= N \n= a for b \n a.\n\n\n\n\nExample\n\n\nimport random\n\nlst = [1, 2, 3, 4, 5]\n\nprint random.choice(lst)\n\nprint random.randint(1, 10)\n\nprint random.random()\n\nrandom.shuffle(lst)\nprint lst\n\nprint random.sample(range(100), 10)\n\n\n\n\nReference\n\n\n\n\nrandom module - docs.python.org", 
            "title": "random"
        }, 
        {
            "location": "/stdmod/random/#random-generate-pseudo-random-numbers", 
            "text": "This module implements a subset of Python standard  random  module, it contains pseudo-random number generators for various distributions. To use it, make sure include  import random  first.", 
            "title": "random \u2014 Generate pseudo-random numbers"
        }, 
        {
            "location": "/stdmod/random/#functions", 
            "text": "random.choice(seq)  : Return a random element from the non-empty sequence seq.  random.randint(a, b)  : Return a random integer N such that a  = N  = b  random.random  : Return the next random floating point number in the range [0.0, 1.0).  random.randrange(stop)  : See below.  random.randrange(start, stop[, step])  : Return a randomly selected element from  range(start, stop, step) . This is equivalent to  choice(range(start, stop, step)) .  random.sample(population, k) : Return a k length list of unique elements chosen from the population sequence.  random.seed(x)  : Initialize the basic random number generator.  random.shuffle(x)  : Shuffle the sequence x in place.  random.triangular(low, high, mode) : Return a random floating point number N such that low  = N  = high and with the specified mode between those bounds.  random.uniform(a, b) : Return a random floating point number N such that a  = N  = b for a  = b and b  = N  = a for b   a.", 
            "title": "Functions"
        }, 
        {
            "location": "/stdmod/random/#example", 
            "text": "import random\n\nlst = [1, 2, 3, 4, 5]\n\nprint random.choice(lst)\n\nprint random.randint(1, 10)\n\nprint random.random()\n\nrandom.shuffle(lst)\nprint lst\n\nprint random.sample(range(100), 10)", 
            "title": "Example"
        }, 
        {
            "location": "/stdmod/random/#reference", 
            "text": "random module - docs.python.org", 
            "title": "Reference"
        }, 
        {
            "location": "/stdmod/regexp/", 
            "text": "re \u2014 Regular expression operations\n\n\nThis module provides regular expression matching operations.\n\n\nConstants\n\n\n\n\nre.I\n or \nre.IGNORECASE\n : Perform case-insensitive matching\n\n\nre.M\n or \nre.MULTILINE\n : When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).\n\n\n\n\nFunctions\n\n\n\n\nre.findall\n\n\nre.match\n\n\nre.search\n\n\nre.split\n\n\n\n\nClass\n\n\n\n\nre.MatchObject\n : match object support methods \ngroup\n and \ngroups\n\n\n\n\nFor more information on how to use above attributes and methods, check Python's official documentation at \nre module - docs.python.org\n\n\nExample\n\n\nimport re\n\nm = re.match(r\n(\\w+) (\\w+)\n, \nIsaac Newton, physicist\n)\n\nprint m.group(0)\n# Isaac Newton\n\nprint m.group(1)\n# Isaac\n\nprint m.group(2)\n# Newton\n\n\n\n\nReference\n\n\n\n\nre module - docs.python.org", 
            "title": "re"
        }, 
        {
            "location": "/stdmod/regexp/#re-regular-expression-operations", 
            "text": "This module provides regular expression matching operations.", 
            "title": "re \u2014 Regular expression operations"
        }, 
        {
            "location": "/stdmod/regexp/#constants", 
            "text": "re.I  or  re.IGNORECASE  : Perform case-insensitive matching  re.M  or  re.MULTILINE  : When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", 
            "title": "Constants"
        }, 
        {
            "location": "/stdmod/regexp/#functions", 
            "text": "re.findall  re.match  re.search  re.split", 
            "title": "Functions"
        }, 
        {
            "location": "/stdmod/regexp/#class", 
            "text": "re.MatchObject  : match object support methods  group  and  groups   For more information on how to use above attributes and methods, check Python's official documentation at  re module - docs.python.org", 
            "title": "Class"
        }, 
        {
            "location": "/stdmod/regexp/#example", 
            "text": "import re\n\nm = re.match(r (\\w+) (\\w+) ,  Isaac Newton, physicist )\n\nprint m.group(0)\n# Isaac Newton\n\nprint m.group(1)\n# Isaac\n\nprint m.group(2)\n# Newton", 
            "title": "Example"
        }, 
        {
            "location": "/stdmod/regexp/#reference", 
            "text": "re module - docs.python.org", 
            "title": "Reference"
        }, 
        {
            "location": "/stdmod/string/", 
            "text": "string - Common string operations\n\n\nThe string module contains a number of useful constants and functions.\n\n\nConstants\n\n\n\n\nstring.ascii_letters\n : The concatenation of the ascii_lowercase and ascii_uppercase constants described below.\n\n\nstring.ascii_lowercase\n : The lowercase letters \nabcdefghijklmnopqrstuvwxyz\n. This value is not locale-dependent and will not change.\n\n\nstring.ascii_uppercase\n : The uppercase letters \nABCDEFGHIJKLMNOPQRSTUVWXYZ\n. This value is not locale-dependent and will not change.\n\n\nstring.digits\n : The string \n0123456789\n.\n\n\nstring.hexdigits\n : The string \n0123456789abcdefABCDEF\n.\n\n\nstring.letters\n : The concatenation of the strings lowercase and uppercase described below.\n\n\nstring.lowercase\n : A string containing all the characters that are considered lowercase letters, \nabcdefghijklmnopqrstuvwxyz\n.\n\n\nstring.octdigits\n : The string \n01234567\n.\n\n\nstring.punctuation\n : String of ASCII characters which are considered punctuation characters.\n\n\nstring.printable\n : String of characters which are considered printable. This is a combination of digits, letters, punctuation, and whitespace.\n\n\nstring.uppercase\n : A string containing all the characters that are considered uppercase letters, \nABCDEFGHIJKLMNOPQRSTUVWXYZ\n.\n\n\nstring.whitespace\n : A string containing all characters that are considered whitespace.\n\n\n\n\nFunctions\n\n\n\n\nstring.capitalize(word)\n: Return a copy of word with only its first character capitalized.\n\n\nstring.capwords(s[, sep])\n: Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  \n\n\nstring.join(words[, sep])\n: Concatenate a list or tuple of words with intervening occurrences of sep.\n\n\nstring.split(s[, sep[, maxsplit]])\n: Return a list of the words of the string s. If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed). If the second argument sep is present and not None, it specifies a string to be used as the word separator.\n\n\n\n\nExample\n\n\nimport string\n\n\nprint string.ascii_letters\n# abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\nprint string.ascii_lowercase\n# abcdefghijklmnopqrstuvwxyz\nprint string.punctuation\n# !\n#$%\n'()*+,-./:;\n=\n?@[\\]^_`{|}~\n\ns = \nhello world\n\nprint string.capwords(s)\n# Hello World\nprint string.capitalize(s)\n# Hello world\n\nwords = [\ni\n, \nlove\n, \npizza\n]\nprint string.join(words, \n*\n)\n# i*love*pizza\n\n\n\n\nReference\n\n\n\n\nstring module, docs.python.org", 
            "title": "string"
        }, 
        {
            "location": "/stdmod/string/#string-common-string-operations", 
            "text": "The string module contains a number of useful constants and functions.", 
            "title": "string - Common string operations"
        }, 
        {
            "location": "/stdmod/string/#constants", 
            "text": "string.ascii_letters  : The concatenation of the ascii_lowercase and ascii_uppercase constants described below.  string.ascii_lowercase  : The lowercase letters  abcdefghijklmnopqrstuvwxyz . This value is not locale-dependent and will not change.  string.ascii_uppercase  : The uppercase letters  ABCDEFGHIJKLMNOPQRSTUVWXYZ . This value is not locale-dependent and will not change.  string.digits  : The string  0123456789 .  string.hexdigits  : The string  0123456789abcdefABCDEF .  string.letters  : The concatenation of the strings lowercase and uppercase described below.  string.lowercase  : A string containing all the characters that are considered lowercase letters,  abcdefghijklmnopqrstuvwxyz .  string.octdigits  : The string  01234567 .  string.punctuation  : String of ASCII characters which are considered punctuation characters.  string.printable  : String of characters which are considered printable. This is a combination of digits, letters, punctuation, and whitespace.  string.uppercase  : A string containing all the characters that are considered uppercase letters,  ABCDEFGHIJKLMNOPQRSTUVWXYZ .  string.whitespace  : A string containing all characters that are considered whitespace.", 
            "title": "Constants"
        }, 
        {
            "location": "/stdmod/string/#functions", 
            "text": "string.capitalize(word) : Return a copy of word with only its first character capitalized.  string.capwords(s[, sep]) : Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().    string.join(words[, sep]) : Concatenate a list or tuple of words with intervening occurrences of sep.  string.split(s[, sep[, maxsplit]]) : Return a list of the words of the string s. If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed). If the second argument sep is present and not None, it specifies a string to be used as the word separator.", 
            "title": "Functions"
        }, 
        {
            "location": "/stdmod/string/#example", 
            "text": "import string\n\n\nprint string.ascii_letters\n# abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\nprint string.ascii_lowercase\n# abcdefghijklmnopqrstuvwxyz\nprint string.punctuation\n# ! #$% '()*+,-./:; = ?@[\\]^_`{|}~\n\ns =  hello world \nprint string.capwords(s)\n# Hello World\nprint string.capitalize(s)\n# Hello world\n\nwords = [ i ,  love ,  pizza ]\nprint string.join(words,  * )\n# i*love*pizza", 
            "title": "Example"
        }, 
        {
            "location": "/stdmod/string/#reference", 
            "text": "string module, docs.python.org", 
            "title": "Reference"
        }, 
        {
            "location": "/stdmod/time/", 
            "text": "time \u2014 Time access\n\n\n\n\n\nThis module provides time-related functions.\n\n\nAttribute\n\n\n\n\ntime.altzone\n : The offset of the local DST timezone, in seconds west of UTC.\n\n\ntime.daylight\n : Nonzero if a DST timezone is defined.\n\n\ntime.timezone\n : The offset of the local (non-DST) timezone, in seconds west of UTC (negative in most of Western Europe, positive in the US, zero in the UK).\n\n\ntime.tzname\n : A tuple of two strings: the first is the name of the local non-DST timezone, the second is the name of the local DST timezone.\n\n\n\n\nFunctions\n\n\n\n\ntime.asctime([t])\n : Convert a tuple or struct_time representing a time as returned by gmtime() or localtime() to a 24-character string of the following form: 'Sun Jun 20 23:21:05 1993'. If t is not provided, the current time as returned by localtime() is used.\n\n\ntime.clock()\n : Return the current processor time as a floating point number expressed in seconds.\n\n\ntime.ctime([secs])\n : Convert a time expressed in seconds since the epoch to a string representing local time. If secs is not provided or None, the current time as returned by time() is used.\n\n\ntime.gmtime([secs])\n : Convert a time expressed in seconds since the epoch to a struct_time in UTC in which the dst flag is always zero. If secs is not provided or None, the current time as returned by time() is used.\n\n\ntime.localtime[secs]\n : Like gmtime() but converts to local time. If secs is not provided or None, the current time as returned by time() is used.\n\n\ntime.mktime(t)\n : This is the inverse function of localtime(). Its argument is the struct_time or full 9-tuple.\n\n\ntime.sleep(secs)\n : Suspend execution of the current thread for the given number of seconds.\n\n\ntime.time()\n: Return the time in seconds since the epoch as a floating point number.\n\n\n\n\nClass\n\n\n\n\ntime.struct_time\n: The type of the time value sequence returned by gmtime(), localtime().\n\n\n\n\nFor more information, check \ntime module on Python official documentation\n.\n\n\nExample\n\n\nimport time\n\nprint time.timezone\nprint time.altzone\nprint time.ctime()\nprint time.clock()\nprint time.localtime()\nprint time.gmtime()\nprint time.tzname\n\n# print out time every 1 second\nfor i in range(10):\n    print time.asctime()\n    time.sleep(1)\n\n\n\n\nReference\n\n\n\n\ntime module - docs.python.org", 
            "title": "time"
        }, 
        {
            "location": "/stdmod/time/#time-time-access", 
            "text": "This module provides time-related functions.", 
            "title": "time \u2014 Time access"
        }, 
        {
            "location": "/stdmod/time/#attribute", 
            "text": "time.altzone  : The offset of the local DST timezone, in seconds west of UTC.  time.daylight  : Nonzero if a DST timezone is defined.  time.timezone  : The offset of the local (non-DST) timezone, in seconds west of UTC (negative in most of Western Europe, positive in the US, zero in the UK).  time.tzname  : A tuple of two strings: the first is the name of the local non-DST timezone, the second is the name of the local DST timezone.", 
            "title": "Attribute"
        }, 
        {
            "location": "/stdmod/time/#functions", 
            "text": "time.asctime([t])  : Convert a tuple or struct_time representing a time as returned by gmtime() or localtime() to a 24-character string of the following form: 'Sun Jun 20 23:21:05 1993'. If t is not provided, the current time as returned by localtime() is used.  time.clock()  : Return the current processor time as a floating point number expressed in seconds.  time.ctime([secs])  : Convert a time expressed in seconds since the epoch to a string representing local time. If secs is not provided or None, the current time as returned by time() is used.  time.gmtime([secs])  : Convert a time expressed in seconds since the epoch to a struct_time in UTC in which the dst flag is always zero. If secs is not provided or None, the current time as returned by time() is used.  time.localtime[secs]  : Like gmtime() but converts to local time. If secs is not provided or None, the current time as returned by time() is used.  time.mktime(t)  : This is the inverse function of localtime(). Its argument is the struct_time or full 9-tuple.  time.sleep(secs)  : Suspend execution of the current thread for the given number of seconds.  time.time() : Return the time in seconds since the epoch as a floating point number.", 
            "title": "Functions"
        }, 
        {
            "location": "/stdmod/time/#class", 
            "text": "time.struct_time : The type of the time value sequence returned by gmtime(), localtime().   For more information, check  time module on Python official documentation .", 
            "title": "Class"
        }, 
        {
            "location": "/stdmod/time/#example", 
            "text": "import time\n\nprint time.timezone\nprint time.altzone\nprint time.ctime()\nprint time.clock()\nprint time.localtime()\nprint time.gmtime()\nprint time.tzname\n\n# print out time every 1 second\nfor i in range(10):\n    print time.asctime()\n    time.sleep(1)", 
            "title": "Example"
        }, 
        {
            "location": "/stdmod/time/#reference", 
            "text": "time module - docs.python.org", 
            "title": "Reference"
        }, 
        {
            "location": "/turtle/turtle/", 
            "text": "turtle \u2014 Turtle graphics\n\n\nTurtle graphic implements a subset functions of the \nPython Turtle Module\n.\n\n\nSetup\n\n\nfrom turtle import Turtle\n\n# Generate Turtle object, name it like your pet\nnick = Turtle()\n\n\n\n\nNow you have your own turtle (in this example I called it \nnick\n, but you can change it), there are several functions you can use to control your turtle.\n\n\nMove and draw\n\n\n\n\nturtle.forward(distance)\n or \nturtle.fd(distance)\n : Move the turtle forward by \ndistance\n, in the direction the turtle is headed.\n\n\nturtle.backward(distance)\n or \nturtle.back(distance)\n or \nturtle.bk(distance)\n : Move the turtle backward by \ndistance\n, opposite to the direction the turtle is headed. This function doesn't change turtle's heading.\n\n\nturtle.right(angle)\n or \nturtle.rt(angle)\n : Turn turtle right by \nangle\n units.\n\n\nturtle.left(angle)\n or \nturtle.lt(angle)\n : Turn turtle left by \nangle\n units.\n\n\nturtle.goto(x, y)\n : Move turtle to an absolute position. If the pen is down, draw line.\n\n\nturtle.setposition(x, y)\n or \nturtle.setpos(x, y)\n : Move turtle to an absolute position without drawing the line. (\nNotice:\n this one is different with Python's official turtle module documentation, in which \nsetposition\n is the same as \ngoto\n).\n\n\nturtle.setworldcoordinates(llx, lly, urx, ury)\n : Set up user-defined coordinate system and switch to mode \u201cworld\u201d if necessary.\n\n\nturtle.setx(x)\n : Set the turtle\u2019s first coordinate to x, leave second coordinate unchanged.\n\n\nturtle.sety(y)\n : Set the turtle\u2019s second coordinate to y, leave first coordinate unchanged.\n\n\nturtle.setheading(dir)\n or \nturtle.seth(dir)\n : Set the orientation of the turtle to \ndir\n. 0 is east, 90 is north, 180 is west, 270 is south, etc.\n\n\nturtle.home()\n : Move turtle to the origin \u2013 coordinates (0,0) \u2013 and set its heading to its start-orientation.\n\n\nturtle.circle(radius, extent=None)\n : Draw a circle with given radius. The center is radius units left of the turtle; extent \u2013 an angle \u2013 determines which part of the circle is drawn. If extent is not given, draw the entire circle.\n\n\nturtle.dot(size, color=None)\n : Draw a circular dot with diameter size, using color. If size is not given, the maximum of pensize+4 and 2*pensize is used.\n\n\nturtle.stamp()\n : Stamp a copy of the turtle shape onto the canvas at the current turtle position.\n\n\nturtle.speed(number=None)\n : Set the turtle\u2019s speed to an integer value in the range 0..10. If no argument is given, return current speed. If speed number is set to 0 or less than 0 or greater than 10, speed will be set to 0, which is fastest and no animation takes place. 1 is slowest, 3 is slow, 6 is normal, 10 is fast. By default, its speed is 6.\n\n\n\n\nAppearance\n\n\n\n\nturtle.shape(name)\n : Set turtle shape to shape with given name or, if name is not given, return name of current shape. Shape's name could be one of followings: \"arrow\", \"turtle\", \"circle\", \"square\", \"triangle\", \"classic\".\n\n\n\n\nTell Turtle's State\n\n\n\n\nturtle.position()\n or \nturtle.pos()\n : Return the turtle\u2019s current location (x, y)\n\n\nturtle.towards(x, y)\n : Return the angle between the line from turtle position to position specified by (x, y), the vector or the other turtle.\n\n\nturtle.xcor()\n : Return the turtle\u2019s x coordinate.\n\n\nturtle.ycor()\n : Return the turtle\u2019s y coordinate.\n\n\nturtle.heading()\n : Return the turtle\u2019s current heading.\n\n\nturtle.distance(x, y)\n : Return the distance from the turtle to (x, y)\n\n\n\n\nPen control\n\n\n\n\nturtle.pendown()\n or \nturtle.pd()\n or \nturtle.down()\n : Pull the pen down \u2013 drawing when moving.\n\n\nturtle.penup()\n or \nturtle.pu()\n or \nturtle.up()\n : Pull the pen up \u2013 no drawing when moving.\n\n\nturtle.pensize(number)\n or \nturtle.width(number)\n : Set the line thickness to width or return it.\n\n\nturtle.isdown()\n : Return True if pen is down, False if it\u2019s up.\n\n\n\n\nColor control\n\n\n\n\nturtle.pencolor(*args)\n : Return or set the pencolor. \npencolor()\n returns current pen color, \npencolor(colorstring)\n, e.g. \npencolor(\"red\")\n, \npencolor(\"#FF9900\")\n or \npencolor(r, g, b)\n will set pencolor to a RGB color.\n\n\nturtle.fillcolor(*args)\n : Return or set the fillcolor. \nfillcolor()\n returns current fill color. \nfillcolor(colorstring)\n or \nfillcolor(r, g, b)\n set fillcolor to a RGB color.\n\n\nturtle.color(*args)\n : Return or set pencolor and fillcolor. \ncolor()\n returns the current pencolor and the current fillcolor, \ncolor(colorstring)\n or \ncolor(r, g, b)\n set pencolor and fillcolor the a RGB color.\n\n\n\n\nFilling\n\n\n\n\nturtle.fill(flag)\n : Call \nfill(True)\n before drawing the shape you want to fill, and \nfill(False)\n when done.\n\n\nturtle.begin_fill()\n : Call just before drawing a shape to be filled. Equivalent to \nfill(True)\n.\n\n\nturtle.end_fill()\n : Fill the shape drawn after the last call to begin_fill(). Equivalent to \nfill(False)\n.\n\n\n\n\nVisibility\n\n\n\n\nturtle.showturtle()\n or \nturtle.st()\n : Make the turtle visible.\n\n\nturtle.hideturtle()\n or \nturtle.ht()\n : Make the turtle invisible.\n\n\nturtle.isvisible()\n : Return True if the Turtle is shown, False if it\u2019s hidden.\n\n\n\n\nAnimation control\n\n\n\n\nturtle.delay(delay=None)\n : Set or return the drawing delay in milliseconds.\n\n\nturtle.tracer(n=None, delay=None)\n : Turn turtle animation on/off and set delay for update drawings. If n is given, only each n-th regular screen update is really performed.\n\n\n\n\nReset\n\n\n\n\nturtle.reset()\n : Delete the turtle\u2019s drawings from the screen, re-center the turtle and set variables to the default values.\n\n\nturtle.clear()\n : Delete the turtle\u2019s drawings from the screen. Do not move turtle. State and position of the turtle as well as drawings of other turtles are not affected.\n\n\n\n\nExamples\n\n\n\n\nDraw line and circle\n\n\n\n\nfrom turtle import Turtle\nnick = Turtle()\n\n# move forward 100 steps\nnick.forward(100)\n\n# draw a circle with radius 40\nnick.circle(40)\n\n# change pencolor\nnick.pencolor(\nred\n)\n\n# draw a semi-circle\nnick.circle(40, 180)\n\n\n\n\n\n\nDraw square\n\n\n\n\nfrom turtle import Turtle\nnick = Turtle()\n\nnick.forward(100)\nnick.right(90)\nnick.forward(100)\nnick.right(90)\nnick.forward(100)\nnick.right(90)\nnick.forward(100)\nnick.right(90)\n\n\n\n\n\n\nDraw square with loop\n\n\n\n\nfrom turtle import Turtle\nnick = Turtle()\n\nfor counter in range(4):\n    nick.forward(100)\n    nick.right(90)\n\n\n\n\n\n\nFill square with color\n\n\n\n\nfrom turtle import Turtle\nnick = Turtle()\n\n# draw a square fill with red color\nnick.color(\nred\n)\n\nnick.begin_fill()\n\nfor counter in range(4):\n    nick.forward(100)\n    nick.right(90)\n\nnick.end_fill()\n\n\n\n\nReference\n\n\n\n\nturtle library - docs.python.org", 
            "title": "turtle"
        }, 
        {
            "location": "/turtle/turtle/#turtle-turtle-graphics", 
            "text": "Turtle graphic implements a subset functions of the  Python Turtle Module .", 
            "title": "turtle \u2014 Turtle graphics"
        }, 
        {
            "location": "/turtle/turtle/#setup", 
            "text": "from turtle import Turtle\n\n# Generate Turtle object, name it like your pet\nnick = Turtle()  Now you have your own turtle (in this example I called it  nick , but you can change it), there are several functions you can use to control your turtle.", 
            "title": "Setup"
        }, 
        {
            "location": "/turtle/turtle/#move-and-draw", 
            "text": "turtle.forward(distance)  or  turtle.fd(distance)  : Move the turtle forward by  distance , in the direction the turtle is headed.  turtle.backward(distance)  or  turtle.back(distance)  or  turtle.bk(distance)  : Move the turtle backward by  distance , opposite to the direction the turtle is headed. This function doesn't change turtle's heading.  turtle.right(angle)  or  turtle.rt(angle)  : Turn turtle right by  angle  units.  turtle.left(angle)  or  turtle.lt(angle)  : Turn turtle left by  angle  units.  turtle.goto(x, y)  : Move turtle to an absolute position. If the pen is down, draw line.  turtle.setposition(x, y)  or  turtle.setpos(x, y)  : Move turtle to an absolute position without drawing the line. ( Notice:  this one is different with Python's official turtle module documentation, in which  setposition  is the same as  goto ).  turtle.setworldcoordinates(llx, lly, urx, ury)  : Set up user-defined coordinate system and switch to mode \u201cworld\u201d if necessary.  turtle.setx(x)  : Set the turtle\u2019s first coordinate to x, leave second coordinate unchanged.  turtle.sety(y)  : Set the turtle\u2019s second coordinate to y, leave first coordinate unchanged.  turtle.setheading(dir)  or  turtle.seth(dir)  : Set the orientation of the turtle to  dir . 0 is east, 90 is north, 180 is west, 270 is south, etc.  turtle.home()  : Move turtle to the origin \u2013 coordinates (0,0) \u2013 and set its heading to its start-orientation.  turtle.circle(radius, extent=None)  : Draw a circle with given radius. The center is radius units left of the turtle; extent \u2013 an angle \u2013 determines which part of the circle is drawn. If extent is not given, draw the entire circle.  turtle.dot(size, color=None)  : Draw a circular dot with diameter size, using color. If size is not given, the maximum of pensize+4 and 2*pensize is used.  turtle.stamp()  : Stamp a copy of the turtle shape onto the canvas at the current turtle position.  turtle.speed(number=None)  : Set the turtle\u2019s speed to an integer value in the range 0..10. If no argument is given, return current speed. If speed number is set to 0 or less than 0 or greater than 10, speed will be set to 0, which is fastest and no animation takes place. 1 is slowest, 3 is slow, 6 is normal, 10 is fast. By default, its speed is 6.", 
            "title": "Move and draw"
        }, 
        {
            "location": "/turtle/turtle/#appearance", 
            "text": "turtle.shape(name)  : Set turtle shape to shape with given name or, if name is not given, return name of current shape. Shape's name could be one of followings: \"arrow\", \"turtle\", \"circle\", \"square\", \"triangle\", \"classic\".", 
            "title": "Appearance"
        }, 
        {
            "location": "/turtle/turtle/#tell-turtles-state", 
            "text": "turtle.position()  or  turtle.pos()  : Return the turtle\u2019s current location (x, y)  turtle.towards(x, y)  : Return the angle between the line from turtle position to position specified by (x, y), the vector or the other turtle.  turtle.xcor()  : Return the turtle\u2019s x coordinate.  turtle.ycor()  : Return the turtle\u2019s y coordinate.  turtle.heading()  : Return the turtle\u2019s current heading.  turtle.distance(x, y)  : Return the distance from the turtle to (x, y)", 
            "title": "Tell Turtle's State"
        }, 
        {
            "location": "/turtle/turtle/#pen-control", 
            "text": "turtle.pendown()  or  turtle.pd()  or  turtle.down()  : Pull the pen down \u2013 drawing when moving.  turtle.penup()  or  turtle.pu()  or  turtle.up()  : Pull the pen up \u2013 no drawing when moving.  turtle.pensize(number)  or  turtle.width(number)  : Set the line thickness to width or return it.  turtle.isdown()  : Return True if pen is down, False if it\u2019s up.", 
            "title": "Pen control"
        }, 
        {
            "location": "/turtle/turtle/#color-control", 
            "text": "turtle.pencolor(*args)  : Return or set the pencolor.  pencolor()  returns current pen color,  pencolor(colorstring) , e.g.  pencolor(\"red\") ,  pencolor(\"#FF9900\")  or  pencolor(r, g, b)  will set pencolor to a RGB color.  turtle.fillcolor(*args)  : Return or set the fillcolor.  fillcolor()  returns current fill color.  fillcolor(colorstring)  or  fillcolor(r, g, b)  set fillcolor to a RGB color.  turtle.color(*args)  : Return or set pencolor and fillcolor.  color()  returns the current pencolor and the current fillcolor,  color(colorstring)  or  color(r, g, b)  set pencolor and fillcolor the a RGB color.", 
            "title": "Color control"
        }, 
        {
            "location": "/turtle/turtle/#filling", 
            "text": "turtle.fill(flag)  : Call  fill(True)  before drawing the shape you want to fill, and  fill(False)  when done.  turtle.begin_fill()  : Call just before drawing a shape to be filled. Equivalent to  fill(True) .  turtle.end_fill()  : Fill the shape drawn after the last call to begin_fill(). Equivalent to  fill(False) .", 
            "title": "Filling"
        }, 
        {
            "location": "/turtle/turtle/#visibility", 
            "text": "turtle.showturtle()  or  turtle.st()  : Make the turtle visible.  turtle.hideturtle()  or  turtle.ht()  : Make the turtle invisible.  turtle.isvisible()  : Return True if the Turtle is shown, False if it\u2019s hidden.", 
            "title": "Visibility"
        }, 
        {
            "location": "/turtle/turtle/#animation-control", 
            "text": "turtle.delay(delay=None)  : Set or return the drawing delay in milliseconds.  turtle.tracer(n=None, delay=None)  : Turn turtle animation on/off and set delay for update drawings. If n is given, only each n-th regular screen update is really performed.", 
            "title": "Animation control"
        }, 
        {
            "location": "/turtle/turtle/#reset", 
            "text": "turtle.reset()  : Delete the turtle\u2019s drawings from the screen, re-center the turtle and set variables to the default values.  turtle.clear()  : Delete the turtle\u2019s drawings from the screen. Do not move turtle. State and position of the turtle as well as drawings of other turtles are not affected.", 
            "title": "Reset"
        }, 
        {
            "location": "/turtle/turtle/#examples", 
            "text": "Draw line and circle   from turtle import Turtle\nnick = Turtle()\n\n# move forward 100 steps\nnick.forward(100)\n\n# draw a circle with radius 40\nnick.circle(40)\n\n# change pencolor\nnick.pencolor( red )\n\n# draw a semi-circle\nnick.circle(40, 180)   Draw square   from turtle import Turtle\nnick = Turtle()\n\nnick.forward(100)\nnick.right(90)\nnick.forward(100)\nnick.right(90)\nnick.forward(100)\nnick.right(90)\nnick.forward(100)\nnick.right(90)   Draw square with loop   from turtle import Turtle\nnick = Turtle()\n\nfor counter in range(4):\n    nick.forward(100)\n    nick.right(90)   Fill square with color   from turtle import Turtle\nnick = Turtle()\n\n# draw a square fill with red color\nnick.color( red )\n\nnick.begin_fill()\n\nfor counter in range(4):\n    nick.forward(100)\n    nick.right(90)\n\nnick.end_fill()", 
            "title": "Examples"
        }, 
        {
            "location": "/turtle/turtle/#reference", 
            "text": "turtle library - docs.python.org", 
            "title": "Reference"
        }, 
        {
            "location": "/processing/setup/", 
            "text": "setup processing", 
            "title": "Setup"
        }, 
        {
            "location": "/processing/setup/#setup-processing", 
            "text": "", 
            "title": "setup processing"
        }, 
        {
            "location": "/processing/color/", 
            "text": "Color\n\n\nSetting\n\n\n\n\nbackground()\n\n\ncolorMode()\n\n\nfill()\n\n\nnoFill()\n\n\nnoStroke()\n\n\nstroke()\n\n\n\n\nCreating \n Reading\n\n\n\n\nalpha()\n\n\nblendColor()\n\n\nblue()\n\n\nbrightness()\n\n\ncolor()\n\n\ngreen()\n\n\nhue()\n\n\nlerpColor()\n\n\nred()\n\n\nsaturation()\n\n\n\n\nExample\n\n\nfrom processing import *\n\ndef setup():\n    size(400, 400)\n    background(180)\n\ndef draw():\n    fill(255, 0, 0)\n    noStroke()\n    triangle(130, 175, 158, 120, 186, 175)\n\nrun()\n\n\n\n\nReference\n\n\n\n\nProcessingjs", 
            "title": "Color"
        }, 
        {
            "location": "/processing/color/#color", 
            "text": "", 
            "title": "Color"
        }, 
        {
            "location": "/processing/color/#setting", 
            "text": "background()  colorMode()  fill()  noFill()  noStroke()  stroke()", 
            "title": "Setting"
        }, 
        {
            "location": "/processing/color/#creating-reading", 
            "text": "alpha()  blendColor()  blue()  brightness()  color()  green()  hue()  lerpColor()  red()  saturation()", 
            "title": "Creating &amp; Reading"
        }, 
        {
            "location": "/processing/color/#example", 
            "text": "from processing import *\n\ndef setup():\n    size(400, 400)\n    background(180)\n\ndef draw():\n    fill(255, 0, 0)\n    noStroke()\n    triangle(130, 175, 158, 120, 186, 175)\n\nrun()", 
            "title": "Example"
        }, 
        {
            "location": "/processing/color/#reference", 
            "text": "Processingjs", 
            "title": "Reference"
        }, 
        {
            "location": "/processing/shape/", 
            "text": "Shape\n\n\n2D Primitives\n\n\n\n\narc()\n\n\nellipse()\n\n\nline()\n\n\npoint()\n\n\nquad()\n\n\nrect()\n\n\ntriangle()\n\n\n\n\nCurves\n\n\n\n\nbezier()\n\n\nbezierDetail()\n\n\nbezierPoint()\n\n\nbezierTangent()\n\n\ncurve()\n\n\ncurveDetail()\n\n\ncurvePoint()\n\n\ncurveTangent()\n\n\ncurveTightness()\n\n\n\n\n3D Primitives\n\n\n\n\nbox()\n\n\nsphere()\n\n\nsphereDetail()\n\n\n\n\nAttributes\n\n\n\n\nellipseMode()\n\n\nnoSmooth()\n\n\nrectMode()\n\n\nsmooth()\n\n\nstrokeCap()\n\n\nstrokeJoin()\n\n\nstrokeWeight()\n\n\n\n\nVertex\n\n\n\n\nbeginShape()\n\n\nbezierVertex()\n\n\ncurveVertex()\n\n\nendShape()\n\n\ntexture()\n\n\ntextureMode()\n\n\nvertex()\n\n\n\n\nLoading \n Displaying\n\n\n\n\nloadShape()\n\n\nshape()\n\n\nshapeMode()\n\n\n\n\nExample\n\n\nfrom processing import *\n\ndef setup():\n    size(400, 400)\n    background(0, 0, 0)\n\ndef draw():\n    fill(0, 0, 255)\n    ellipse(56, 46, 55, 55)\n    fill(255, 0, 0)\n    triangle(130, 175, 158, 120, 186, 175)\n\nrun()\n\n\n\n\nReference\n\n\n\n\nProcessingjs\n\n\nProcessing.py", 
            "title": "Shape"
        }, 
        {
            "location": "/processing/shape/#shape", 
            "text": "", 
            "title": "Shape"
        }, 
        {
            "location": "/processing/shape/#2d-primitives", 
            "text": "arc()  ellipse()  line()  point()  quad()  rect()  triangle()", 
            "title": "2D Primitives"
        }, 
        {
            "location": "/processing/shape/#curves", 
            "text": "bezier()  bezierDetail()  bezierPoint()  bezierTangent()  curve()  curveDetail()  curvePoint()  curveTangent()  curveTightness()", 
            "title": "Curves"
        }, 
        {
            "location": "/processing/shape/#3d-primitives", 
            "text": "box()  sphere()  sphereDetail()", 
            "title": "3D Primitives"
        }, 
        {
            "location": "/processing/shape/#attributes", 
            "text": "ellipseMode()  noSmooth()  rectMode()  smooth()  strokeCap()  strokeJoin()  strokeWeight()", 
            "title": "Attributes"
        }, 
        {
            "location": "/processing/shape/#vertex", 
            "text": "beginShape()  bezierVertex()  curveVertex()  endShape()  texture()  textureMode()  vertex()", 
            "title": "Vertex"
        }, 
        {
            "location": "/processing/shape/#loading-displaying", 
            "text": "loadShape()  shape()  shapeMode()", 
            "title": "Loading &amp; Displaying"
        }, 
        {
            "location": "/processing/shape/#example", 
            "text": "from processing import *\n\ndef setup():\n    size(400, 400)\n    background(0, 0, 0)\n\ndef draw():\n    fill(0, 0, 255)\n    ellipse(56, 46, 55, 55)\n    fill(255, 0, 0)\n    triangle(130, 175, 158, 120, 186, 175)\n\nrun()", 
            "title": "Example"
        }, 
        {
            "location": "/processing/shape/#reference", 
            "text": "Processingjs  Processing.py", 
            "title": "Reference"
        }, 
        {
            "location": "/processing/typography/", 
            "text": "Typography", 
            "title": "Typography"
        }, 
        {
            "location": "/processing/typography/#typography", 
            "text": "", 
            "title": "Typography"
        }, 
        {
            "location": "/processing/input/", 
            "text": "Input\n\n\nYou can detect if user pressed keyboard or mouse.\n\n\nKeyboard\n\n\nProperty\n\n\n\n\nkeyboard.keyCode\n\n\n\n\nMouse\n\n\nProperty\n\n\n\n\nmouse.x\n\n\nmouse.y\n\n\nmouse.px (?)\n\n\nmouse.py (?)\n\n\nmouse.button\n\n\n\n\nFunctions\n\n\n\n\nmousePressed\n\n\nmouseMoved\n\n\nmouseReleased\n\n\n\n\nExample\n\n\nfrom processing import *\n\ndef mousePressed():\n    print \npressed at:\n, mouse.x, mouse.y\n    # left button is 37, right button is 39\n    print \nmouse button:\n, mouse.button\n\ndef mouseMoved():\n    print \nmouse moved\n\n\ndef mouseReleased():\n    print \nreleased ...\n\n\nrun()", 
            "title": "Input"
        }, 
        {
            "location": "/processing/input/#input", 
            "text": "You can detect if user pressed keyboard or mouse.", 
            "title": "Input"
        }, 
        {
            "location": "/processing/input/#keyboard", 
            "text": "", 
            "title": "Keyboard"
        }, 
        {
            "location": "/processing/input/#property", 
            "text": "keyboard.keyCode", 
            "title": "Property"
        }, 
        {
            "location": "/processing/input/#mouse", 
            "text": "", 
            "title": "Mouse"
        }, 
        {
            "location": "/processing/input/#property_1", 
            "text": "mouse.x  mouse.y  mouse.px (?)  mouse.py (?)  mouse.button", 
            "title": "Property"
        }, 
        {
            "location": "/processing/input/#functions", 
            "text": "mousePressed  mouseMoved  mouseReleased", 
            "title": "Functions"
        }, 
        {
            "location": "/processing/input/#example", 
            "text": "from processing import *\n\ndef mousePressed():\n    print  pressed at: , mouse.x, mouse.y\n    # left button is 37, right button is 39\n    print  mouse button: , mouse.button\n\ndef mouseMoved():\n    print  mouse moved \n\ndef mouseReleased():\n    print  released ... \n\nrun()", 
            "title": "Example"
        }, 
        {
            "location": "/processing/image/", 
            "text": "Image\n\n\n\n\nPImage\n\n\ncreateImage()\n\n\n\n\nLoading \n Displaying\n\n\n\n\nimage()\n\n\nimageMode()\n\n\nloadImage()\n\n\nnoTint()\n\n\nrequestImage()\n\n\ntint()\n\n\n\n\nPixels\n\n\n\n\nblend()\n\n\ncopy()\n\n\nfilter()\n\n\nget()\n\n\nloadPixels()\n\n\nset()\n\n\nupdatePixels()\n\n\n\n\nReference\n\n\n\n\nProcessingjs", 
            "title": "Image"
        }, 
        {
            "location": "/processing/image/#image", 
            "text": "PImage  createImage()", 
            "title": "Image"
        }, 
        {
            "location": "/processing/image/#loading-displaying", 
            "text": "image()  imageMode()  loadImage()  noTint()  requestImage()  tint()", 
            "title": "Loading &amp; Displaying"
        }, 
        {
            "location": "/processing/image/#pixels", 
            "text": "blend()  copy()  filter()  get()  loadPixels()  set()  updatePixels()", 
            "title": "Pixels"
        }, 
        {
            "location": "/processing/image/#reference", 
            "text": "Processingjs", 
            "title": "Reference"
        }, 
        {
            "location": "/processing/transform/", 
            "text": "Transform", 
            "title": "Transform"
        }, 
        {
            "location": "/processing/transform/#transform", 
            "text": "", 
            "title": "Transform"
        }, 
        {
            "location": "/processing/light-camera/", 
            "text": "Light \n Camera", 
            "title": "Light & Camera"
        }, 
        {
            "location": "/processing/light-camera/#light-camera", 
            "text": "", 
            "title": "Light &amp; Camera"
        }, 
        {
            "location": "/processing/math/", 
            "text": "Math\n\n\n\n\nPVector", 
            "title": "Math"
        }, 
        {
            "location": "/processing/math/#math", 
            "text": "PVector", 
            "title": "Math"
        }, 
        {
            "location": "/processing/constants/", 
            "text": "Constants\n\n\n\n\nHALF_PI\n : PI / 2.0\n\n\nTHIRD_PI\n : PI / 3.0\n\n\nPI\n : PI (3.14159...)\n\n\nTWO_PI\n : PI * 2.0\n\n\nQUARTER_PI\n : PI / 4.0\n\n\nDEG_TO_RAD\n : PI / 180\n\n\nRAD_TO_REG\n : 180 / PI", 
            "title": "Constants"
        }, 
        {
            "location": "/processing/constants/#constants", 
            "text": "HALF_PI  : PI / 2.0  THIRD_PI  : PI / 3.0  PI  : PI (3.14159...)  TWO_PI  : PI * 2.0  QUARTER_PI  : PI / 4.0  DEG_TO_RAD  : PI / 180  RAD_TO_REG  : 180 / PI", 
            "title": "Constants"
        }
    ]
}